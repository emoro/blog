<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on </title>
    <link>http://estebanmoro.org/categories/r/</link>
    <description>Recent content in R on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 14 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://estebanmoro.org/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wordle is getting (slightly) harder</title>
      <link>http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/</guid>
      <description>
&lt;script src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Marty, I‚Äôve been to the future and I have bad news. Wordle is getting harder. Not much, but harder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;656tqq.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With millions of people playing the game Wordle online and the recent takeover by the New York times, some speculation about whether the game is getting harder is unavoidable. Since Wordle chooses a different word every day, some players have started to complain recent target words are harder to be guessed:
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;It must be a coincidence, but the NY Times puzzles are hard and suddenly Wordle has questionable words&lt;/p&gt;&amp;mdash; anna spargo-ryan üçâ (@annaspargoryan) &lt;a href=&#34;https://twitter.com/annaspargoryan/status/1492576548137816067?ref_src=twsrc%5Etfw&#34;&gt;February 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/p&gt;
&lt;p&gt;Some claim that NYT might have changed something about the game. Even &lt;a href=&#34;https://www.theguardian.com/media/2022/feb/14/is-wordle-getting-harder-viral-game-tests-players-after-new-york-times-takeover&#34;&gt;some newspapers&lt;/a&gt; have covered that worry.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;this is not true&lt;/strong&gt;: nothing has changed in the game since the takeover, and the code and data used to get every day‚Äôs word has not changed. Moreover, it is statistically impossible to show that the game is getting more complicated since the NYT took over the game (only a couple of weeks).&lt;/p&gt;
&lt;p&gt;Still, I‚Äôve traveled to the future, and the answer is &lt;strong&gt;yes&lt;/strong&gt;, Wordle is getting harder, but not because somebody has changed the game. It was bound to get harder in the future since its creation. Let me explain you how I investigate it using statistics and &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;defining-harder&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Defining &lt;em&gt;harder&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;As you know, Wordle chooses a target word every day. Although there are 12972 5-letter words in the Wordle dictionary, one of the key ingredients of the game is that the target word is not chosen randomly from that dictionary. The very creator of the game, Josh Wardle &lt;a href=&#34;https://www.nytimes.com/2022/01/03/technology/wordle-word-game-creator.html&#34;&gt;revealed&lt;/a&gt; that he &lt;em&gt;narrowed down the list of Wordle words to about 2,500&lt;/em&gt; which are most likely to be known by his partner (the first recipient of the game).&lt;/p&gt;
&lt;p&gt;As I showed in a &lt;a href=&#34;http://estebanmoro.org/post/2022-01-10-wordle/&#34;&gt;previous post&lt;/a&gt;, those words are more frequent in English than randomly chosen words from the dictionary. For example, the list of 2,500 contains words like &lt;em&gt;grade&lt;/em&gt;, &lt;em&gt;robot&lt;/em&gt;, &lt;em&gt;pride&lt;/em&gt;, but not some unusual (possible) words like &lt;em&gt;aahed&lt;/em&gt; or &lt;em&gt;bemix&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;657yri.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs see how frequent possible answers are. To do that we are going to use the fantastic &lt;code&gt;wordle&lt;/code&gt; &lt;a href=&#34;https://github.com/coolbutuseless/wordle/&#34;&gt;package&lt;/a&gt; created by &lt;a href=&#34;https://twitter.com/coolbutuseless&#34;&gt;Mikefc&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#remotes::install_github(&amp;#39;coolbutuseless/wordle&amp;#39;)
library(wordle)
library(tidyverse)
helper &amp;lt;- WordleHelper$new(nchar = 5)
dictionary &amp;lt;- helper$words
length(dictionary)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12972&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, there are 12972 5-letter words in the Wordle dictionary. Many places on the web have a list of past Wordle answers. You can download the list of past answers &lt;a href=&#34;./data/past_answers.csv&#34;&gt;here&lt;/a&gt;, until yesterday‚Äôs:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;past_answers &amp;lt;- read.csv(&amp;quot;./data/past_answers.csv&amp;quot;)
head(past_answers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         date  word
## 1 2021-06-19 cigar
## 2 2021-06-20 rebut
## 3 2021-06-21 sissy
## 4 2021-06-22 humph
## 5 2021-06-23 awake
## 6 2021-06-24 blush&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To define the game‚Äôs difficulty, we will use the same logic underneath Wardle‚Äôs choice of answers: their frequency in English. As in &lt;a href=&#34;http://estebanmoro.org/post/2022-01-10-wordle/&#34;&gt;my previous post&lt;/a&gt;, we will use two corpora of commonly-used words in English to rank them according to the frequency. They are the &lt;a href=&#34;https://www.kaggle.com/rtatman/english-word-frequency&#34;&gt;corpus of commonly-used words from the Google Web Trillion Word Corpus&lt;/a&gt; and the &lt;a href=&#34;http://ucrel.lancs.ac.uk/bncfreq/flists.html&#34;&gt;BNC word frequency list&lt;/a&gt;. Let‚Äôs put them together:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;helper = WordleHelper$new(nchar = 5)
freq = tibble(word = helper$words) %&amp;gt;%
  left_join(read.csv(&amp;quot;./data/unigram_freq.csv&amp;quot;), 
            by = &amp;quot;word&amp;quot;) %&amp;gt;%
  left_join(
    read.csv(&amp;quot;./data/bnc_freq.csv&amp;quot;) %&amp;gt;%
      group_by(word) %&amp;gt;%
      summarise(count = sum(count)),
    by = &amp;quot;word&amp;quot;
  ) %&amp;gt;%
  mutate(
    count.x = ifelse(is.na(count.x), 0, count.x),
    count.y = ifelse(is.na(count.y), 0, count.y),
    count = count.x/sum(count.x) + count.y/sum(count.y),
    # need a nonzero count for all words, 
    # so just assume words that don&amp;#39;t
    # appear at all are half as frequent as the 
    # least frequent appearing word
    count = ifelse(count==0,min(count[count != 0])/2,count),
    # rough log of the count shifted above 0
    # (we&amp;#39;ll want this later)
    log_count = log(count) - log(min(count)/2),
    rank = rank(-count,ties.method = &amp;quot;random&amp;quot;,)
  ) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the top most frequent 5-letter words (top ranked):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;freq %&amp;gt;% arrange(rank) %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 √ó 6
##   word     count.x count.y  count log_count  rank
##   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1 which  810514085    3719 0.0554      13.9     1
## 2 there  701170205    3278 0.0486      13.8     2
## 3 their  782849411    2608 0.0423      13.6     3
## 4 about 1226734006    1971 0.0420      13.6     4
## 5 would  572644147    2551 0.0383      13.5     5
## 6 other  978481319    1421 0.0317      13.4     6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the bottom less frequent&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;freq %&amp;gt;% arrange(rank) %&amp;gt;% tail()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 √ó 6
##   word  count.x count.y       count log_count  rank
##   &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1 flews       0       0 0.000000101     0.693 12967
## 2 trods       0       0 0.000000101     0.693 12968
## 3 fusks       0       0 0.000000101     0.693 12969
## 4 fugus       0       0 0.000000101     0.693 12970
## 5 staps       0       0 0.000000101     0.693 12971
## 6 jurel       0       0 0.000000101     0.693 12972&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The average &lt;em&gt;rank&lt;/em&gt; of the answers in Wordle is much smaller than randomly chosen words in the dictionary, as expected:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;freq %&amp;gt;% 
  mutate(`Wordle Answer`=ifelse(word %in% past_answers$word,T,F)) %&amp;gt;%
  group_by(`Wordle Answer`) %&amp;gt;% summarize(mean_rank=mean(rank))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 √ó 2
##   `Wordle Answer` mean_rank
##   &amp;lt;lgl&amp;gt;               &amp;lt;dbl&amp;gt;
## 1 FALSE               6571.
## 2 TRUE                1999.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can investigate if the rank has changed since Wordle started in Jun 2021:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(ggrepel)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggrepel&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;merge(past_answers,freq) %&amp;gt;% 
  ggplot(aes(x=as.Date(date),y=rank)) + geom_point() + geom_smooth() +
  geom_text_repel(aes(label=ifelse(rank&amp;gt;6000 | rank &amp;lt; 100,word,&amp;quot;&amp;quot;))) +
  geom_vline(xintercept = as.Date(&amp;quot;2022-02-01&amp;quot;),linetype=2) + 
  scale_y_log10() + labs(x=&amp;quot;Date&amp;quot;,title=&amp;quot;Rank (higher is harder)&amp;quot;,y=&amp;quot;&amp;quot;)+
  scale_x_date(date_labels = &amp;quot;%b/%Y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;
The vertical dashed line is when the NYT took over. We don‚Äôt see any statistically significant change (consider the error bars). If anything, we can see a little bit of change towards the end, but to more frequent words in English! So, if any, the game is getting simpler more recently. However, this small change is not statistically significant. A t-test between the average rank before and after the NYT takeover shows that (p-value = 0.27):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggpubr)
merge(past_answers,freq) %&amp;gt;% 
  mutate(`NYT owned`=ifelse(date &amp;gt;= &amp;quot;2022-02-01&amp;quot;,T,F)) %&amp;gt;%
  ggboxplot(x=&amp;quot;NYT owned&amp;quot;,y=&amp;quot;rank&amp;quot;,
            color=&amp;quot;NYT owned&amp;quot;,add=&amp;quot;jitter&amp;quot;,palette=&amp;quot;jco&amp;quot;) +
  stat_compare_means(method=&amp;quot;t.test&amp;quot;) + 
  labs(y=&amp;quot;Rank (larger is harder)&amp;quot;,x=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;
Again, nothing has changed in the dynamic and code of the game, so what the players might be reporting is just a statistical fluke. Or a personal impression.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wordle-2027&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Wordle 2027&lt;/h1&gt;
&lt;p&gt;If nothing changes, the only way the game could become harder is that answers are selected from less frequent words. Can we investigate it? Fortunately, I recently bought a DeLorean on eBay&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, and I went &lt;em&gt;back to the future&lt;/em&gt; to obtain the list of all Wordle answers until October 2027. Yes, I got the Almanac in 2027 with all the past answers to the game!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;almanac.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs load them (out of respect to the game‚Äôs developer and the community of players, I won‚Äôt distribute them, so the code below only works on my computer. I only show the first ones in 2021):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_answers &amp;lt;- read.csv(&amp;quot;all_solutions.csv&amp;quot;)
head(all_answers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         date  word
## 1 2021-06-19 cigar
## 2 2021-06-20 rebut
## 3 2021-06-21 sissy
## 4 2021-06-22 humph
## 5 2021-06-23 awake
## 6 2021-06-24 blush&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and add the rank of the chosen word each day&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_answers &amp;lt;- merge(all_answers,freq)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs see the evolution of the rank (how hard is the game) of the answers in the future (I have added a small amount of noise so it cannot be reversed)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_answers %&amp;gt;% 
  ggplot(aes(x=as.Date(date),
             y=rank+600*rnorm(length(rank)))) +
  geom_point() + geom_smooth() +
  geom_vline(xintercept = as.Date(&amp;quot;2022-02-01&amp;quot;),linetype=2)+
  labs(x=&amp;quot;Date&amp;quot;,title=&amp;quot;Rank (higher is harder)&amp;quot;,y=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;gam&amp;#39; and formula &amp;#39;y ~ s(x, bs = &amp;quot;cs&amp;quot;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see, the rank of the words is more or less homogeneous. Although we can see a slight upwards tendency in the rank. Let‚Äôs see how the average rank changes by month and year.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(lubridate)
all_answers %&amp;gt;% group_by(month=month(date),year=year(date)) %&amp;gt;% 
  summarize(mean_rank=mean(rank)) %&amp;gt;%
  mutate(date = lubridate::my(paste(month,year,sep=&amp;quot;-&amp;quot;))) %&amp;gt;%
  ggplot(aes(x=as.Date(date),y=mean_rank)) + geom_line() +
  labs(x=&amp;quot;Date&amp;quot;,title=&amp;quot;Average rank by month&amp;quot;,y=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;
The tendency is clear: the rank of the words will increase in the future, and the game will become more challenging because less frequent words will be chosen in the future. Actually, the beginning of 2022 looks promising since the average rank of the words chosen will be the lowest in the time series. However, it will be slightly harder than before around summer 2022.&lt;/p&gt;
&lt;p&gt;But why is it getting slightly harder? The reason is how Wardle chose the answers. When composing the list, maybe he decided first the most common words in English and later those less common words. This could explain the small change towards the end of the time series.&lt;/p&gt;
&lt;p&gt;Finally, we can test the statistical significance between 2022 and 2027.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_answers %&amp;gt;% filter(year(date) %in% c(&amp;quot;2022&amp;quot;,&amp;quot;2027&amp;quot;)) %&amp;gt;%
  mutate(year=year(date)) %&amp;gt;% 
  ggboxplot(x=&amp;quot;year&amp;quot;,y=&amp;quot;rank&amp;quot;,
            color=&amp;quot;year&amp;quot;,add=&amp;quot;jitter&amp;quot;,palette=&amp;quot;jco&amp;quot;) +
  stat_compare_means(method=&amp;quot;t.test&amp;quot;) + 
  labs(y=&amp;quot;Rank (larger is harder)&amp;quot;,x=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;
The statistical difference is there (at 0.05 p-value). Statistically speaking, we can say that Wordle 2027 will be harder (on average) than 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-harder-again&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Defining &lt;em&gt;harder&lt;/em&gt; (again)&lt;/h1&gt;
&lt;p&gt;In the end, the real difficulty of the game can only be measured by how hard it is for the players to find the answer. Although we cannot get data about it, we can still simulate a simple strategy to win the game and see how well it will perform in the future. In a previous post &lt;a href=&#34;http://estebanmoro.org/post/2022-01-10-wordle/&#34;&gt;I presented a possible strategy&lt;/a&gt; based on choosing words according to their rank and a smart choice of the first word with a 97% winning probability in the past.&lt;/p&gt;
&lt;p&gt;To evaluate that strategy, I wrote a function in &lt;code&gt;R&lt;/code&gt; named &lt;code&gt;play_game&lt;/code&gt; that uses the package &lt;code&gt;wordle&lt;/code&gt; to play against an answer given a first guess.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;play_game &amp;lt;- function(word,first_guess,quiet=FALSE){
  helper = WordleHelper$new(nchar = nchar(word)) #initialize the game
  game = WordleGame$new(helper$words, target_word = word)
  
  #make the first guess
  if (!is.null(first_guess)) {
    helper$update(first_guess, 
                  game$try(first_guess, quiet = quiet))
  }
  
  #iterate until solved
  while (!game$is_solved()) {
    guess = score_words(helper$words)$word[[1]] #choose next guess
    helper$update(guess, game$try(guess,quiet=quiet))
  }
  game$attempts
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The strategy is encoded into the &lt;code&gt;score_words&lt;/code&gt; function, which chooses always the most frequent word out of the compatible words in each round:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;score_words &amp;lt;- function(words){
  ff &amp;lt;- freq %&amp;gt;% filter(word %in% words)
  ff %&amp;gt;% arrange(rank)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, this is how it plays against the word for Jan 10 using &lt;code&gt;orate&lt;/code&gt; as first guess:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;answer &amp;lt;- play_game(word=&amp;quot;query&amp;quot;,first_guess=&amp;quot;orate&amp;quot;,quiet=T)
answer&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;orate&amp;quot; &amp;quot;under&amp;quot; &amp;quot;query&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time it solved it in 3 tries.&lt;/p&gt;
&lt;p&gt;Fast forward, let‚Äôs get the number of tries it will take to solve every game until 2027 using &lt;code&gt;orate&lt;/code&gt; as first guess:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try_orate &amp;lt;- 
  map_dfr(all_answers$word,
          \(w) {
            n &amp;lt;- length(play_game(w,&amp;quot;orate&amp;quot;,quiet=T))
            data.frame(word=w,ntries=n)
          }
  ) %&amp;gt;%
  merge(all_answers)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And once again, let‚Äôs see the average number of attempts by month and year:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try_orate %&amp;gt;% group_by(month=month(date),year=year(date)) %&amp;gt;% 
  summarize(mean_tries=mean(ntries)) %&amp;gt;%
  mutate(date = lubridate::my(paste(month,year,sep=&amp;quot;-&amp;quot;))) %&amp;gt;%
  ggplot(aes(x=as.Date(date),y=mean_tries)) + geom_line() +
  labs(x=&amp;quot;Date&amp;quot;,title=&amp;quot;Average number of tries by month&amp;quot;,y=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;month&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;
Again we can see that the strategy will perform worse in later years. Finally, this is the probability to win (less of equal to 6 tries)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try_orate %&amp;gt;% group_by(month=month(date),year=year(date)) %&amp;gt;% 
  summarize(prob_win=100*mean(ntries &amp;lt; 7)) %&amp;gt;%
  mutate(date = lubridate::my(paste(month,year,sep=&amp;quot;-&amp;quot;))) %&amp;gt;%
  ggplot(aes(x=as.Date(date),y=prob_win)) + geom_line() +
  labs(x=&amp;quot;Date&amp;quot;,title=&amp;quot;Probability of winning (%)&amp;quot;,y=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &amp;#39;month&amp;#39;. You can override using the
## `.groups` argument.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-02-14-wordle-is-getting-harder/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;
At the end of 2027, the probability of wining even goes below 85%.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So, yes, Wordle is getting slightly more challenging. But it has nothing to do with the recent New York Times takeover. If the game does not change in the future, we can expect the answers to be less frequent words in English (especially in 2027). Not too much, though, so it will still be playable and enjoyed by the community.&lt;/p&gt;
&lt;p&gt;We still have time to practice those less common words. And most likely, the game will change before that. Perhaps since we now know the future, it will never become possible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;paradox.jpeg&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;The actual list of possible answers up to October 2027 is hard encoded in the Javascript of the game. Out of respect to the game‚Äôs developer and the community of players I don‚Äôt recommend or encourage anybody to hack the code to do it and will not show or distribute them. The results displayed on this page are just for the statistical analysis of the game‚Äôs evolution. Please, don‚Äôt cheat, enjoy the game as it was intended.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Playing (and winning) Wordle with R</title>
      <link>http://estebanmoro.org/post/2022-01-10-wordle/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2022-01-10-wordle/</guid>
      <description>
&lt;script src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Unless you have been away for the last month, you, your family or friends have been &lt;a href=&#34;https://www.nytimes.com/2022/01/03/technology/wordle-word-game-creator.html&#34;&gt;talking about&lt;/a&gt; or playing &lt;a href=&#34;https://en.wikipedia.org/wiki/Wordle_(video_game)&#34;&gt;Wordle&lt;/a&gt;. It is a very straightforward game which reminds us (old enough) of the great &lt;a href=&#34;https://en.wikipedia.org/wiki/Mastermind_(board_game)&#34;&gt;MasterMind&lt;/a&gt;, but with words.&lt;/p&gt;
&lt;p&gt;The idea is very simple. In the &lt;a href=&#34;https://www.powerlanguage.co.uk/wordle/&#34;&gt;original version&lt;/a&gt; by Josh Wardle, we try to guess a (English) word of five letters. After each guess the game shows you what letters are in the answer in the right position (green), in the answer but in a wrong position (yellow) or not in the answer at all (gray).&lt;/p&gt;
&lt;p&gt;For example, here is the screenshot of the most recent one I played (Jan 10)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;wordle.png&#34; style=&#34;width:50.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, I guessed the word in 3 tries out of 6 allowed. Many variations exist now, including &lt;a href=&#34;https://wordle.danielfrg.com&#34;&gt;one in Spanish&lt;/a&gt;. There are many reasons why it has become a viral phenomenon , most likely because Wardle added a sharing element to the game, letting users copy their results in the form of a grid of colored squared emojis.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Wordle 202 3/6&lt;br&gt;&lt;br&gt;‚¨ú‚¨úüü®üü®‚¨ú&lt;br&gt;‚¨úüü©‚¨úüü®üü®&lt;br&gt;üü©üü©üü©üü©üü© üòé&lt;/p&gt;&amp;mdash; Esteban Moro (@estebanmoro) &lt;a href=&#34;https://twitter.com/estebanmoro/status/1479467969545658369?ref_src=twsrc%5Etfw&#34;&gt;January 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/p&gt;
&lt;p&gt;Since Wardle publishes only one puzzle per day, players can compare their results on Twitter or by message, allowing for synchronized and unhurried social interaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cracking-the-game&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cracking the game&lt;/h1&gt;
&lt;p&gt;Although the game is not so difficult (another of its merits), the obvious question is what is the best strategy to win the game every day. In this post, we will investigate this question with the help of &lt;code&gt;R&lt;/code&gt; and in our journey, we will learn much more about how the game is designed.&lt;/p&gt;
&lt;p&gt;To do it, we will use the fantastic &lt;code&gt;wordle&lt;/code&gt; &lt;a href=&#34;https://github.com/coolbutuseless/wordle/&#34;&gt;package&lt;/a&gt; created by Mikefc &lt;span class=&#34;citation&#34;&gt;[@coolbutuseless]&lt;/span&gt;(&lt;a href=&#34;https://twitter.com/coolbutuseless&#34; class=&#34;uri&#34;&gt;https://twitter.com/coolbutuseless&lt;/a&gt;). This package allows you to play Wordle in the &lt;code&gt;R&lt;/code&gt; console [with &lt;code&gt;play_wordle()&lt;/code&gt;]. Most interestingly, it can also help you play the online version through the &lt;code&gt;WordleHelper&lt;/code&gt; class. For example, this is how we can use it for the Jan 10 puzzle. Let‚Äôs initialize the game.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#remotes::install_github(&amp;#39;coolbutuseless/wordle&amp;#39;)
library(wordle)
helper &amp;lt;- WordleHelper$new(nchar = 5)
dictionary &amp;lt;- helper$words
length(dictionary)
## [1] 12972&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, there are 12972 words of 5 letters in the Wordle dictionary.&lt;/p&gt;
&lt;p&gt;My initial guess was &lt;code&gt;aeros&lt;/code&gt;, and I got ‚Äù ‚¨ú üü® üü® ‚¨ú ‚¨ú ‚Äú. We can use this to get us the list of options compatible with that answer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;helper$update(&amp;quot;aeros&amp;quot;, c(&amp;#39;gray&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;))
helper$words&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;bider&amp;quot; &amp;quot;biker&amp;quot; &amp;quot;biner&amp;quot; &amp;quot;biter&amp;quot; &amp;quot;blert&amp;quot; &amp;quot;bluer&amp;quot;
##   [7] &amp;quot;brede&amp;quot; &amp;quot;breed&amp;quot; &amp;quot;breem&amp;quot; &amp;quot;breer&amp;quot; &amp;quot;breid&amp;quot; &amp;quot;breme&amp;quot;
##  [13] &amp;quot;brent&amp;quot; &amp;quot;brere&amp;quot; &amp;quot;breve&amp;quot; &amp;quot;bribe&amp;quot; &amp;quot;bride&amp;quot; &amp;quot;brief&amp;quot;
##  [19] &amp;quot;brier&amp;quot; &amp;quot;brine&amp;quot; &amp;quot;brize&amp;quot; &amp;quot;brule&amp;quot; &amp;quot;brume&amp;quot; &amp;quot;brute&amp;quot;
##  [25] &amp;quot;buyer&amp;quot; &amp;quot;cheer&amp;quot; &amp;quot;chere&amp;quot; &amp;quot;chert&amp;quot; &amp;quot;cider&amp;quot; &amp;quot;citer&amp;quot;
##  [31] &amp;quot;clerk&amp;quot; &amp;quot;creed&amp;quot; &amp;quot;creek&amp;quot; &amp;quot;creel&amp;quot; &amp;quot;creep&amp;quot; &amp;quot;creme&amp;quot;
##  [37] &amp;quot;crepe&amp;quot; &amp;quot;crept&amp;quot; &amp;quot;crepy&amp;quot; &amp;quot;crewe&amp;quot; &amp;quot;cried&amp;quot; &amp;quot;crier&amp;quot;
##  [43] &amp;quot;crime&amp;quot; &amp;quot;crine&amp;quot; &amp;quot;cripe&amp;quot; &amp;quot;crude&amp;quot; &amp;quot;cruel&amp;quot; &amp;quot;cruet&amp;quot;
##  [49] &amp;quot;cruve&amp;quot; &amp;quot;cryer&amp;quot; &amp;quot;cuber&amp;quot; &amp;quot;cuter&amp;quot; &amp;quot;cyber&amp;quot; &amp;quot;cyder&amp;quot;
##  [55] &amp;quot;dicer&amp;quot; &amp;quot;diker&amp;quot; &amp;quot;dimer&amp;quot; &amp;quot;diner&amp;quot; &amp;quot;diver&amp;quot; &amp;quot;dreck&amp;quot;
##  [61] &amp;quot;dreed&amp;quot; &amp;quot;dreer&amp;quot; &amp;quot;drent&amp;quot; &amp;quot;drere&amp;quot; &amp;quot;drice&amp;quot; &amp;quot;dried&amp;quot;
##  [67] &amp;quot;drier&amp;quot; &amp;quot;drive&amp;quot; &amp;quot;drupe&amp;quot; &amp;quot;dryer&amp;quot; &amp;quot;duper&amp;quot; &amp;quot;edger&amp;quot;
##  [73] &amp;quot;egger&amp;quot; &amp;quot;eider&amp;quot; &amp;quot;elder&amp;quot; &amp;quot;elver&amp;quot; &amp;quot;ember&amp;quot; &amp;quot;emeer&amp;quot;
##  [79] &amp;quot;emerg&amp;quot; &amp;quot;emery&amp;quot; &amp;quot;emmer&amp;quot; &amp;quot;emure&amp;quot; &amp;quot;ender&amp;quot; &amp;quot;enter&amp;quot;
##  [85] &amp;quot;entry&amp;quot; &amp;quot;enure&amp;quot; &amp;quot;enurn&amp;quot; &amp;quot;erect&amp;quot; &amp;quot;erick&amp;quot; &amp;quot;ering&amp;quot;
##  [91] &amp;quot;erned&amp;quot; &amp;quot;eruct&amp;quot; &amp;quot;erupt&amp;quot; &amp;quot;erven&amp;quot; &amp;quot;ervil&amp;quot; &amp;quot;ether&amp;quot;
##  [97] &amp;quot;evert&amp;quot; &amp;quot;every&amp;quot; &amp;quot;exert&amp;quot; &amp;quot;exurb&amp;quot; &amp;quot;fiber&amp;quot; &amp;quot;fibre&amp;quot;
## [103] &amp;quot;fiere&amp;quot; &amp;quot;fiery&amp;quot; &amp;quot;fifer&amp;quot; &amp;quot;filer&amp;quot; &amp;quot;finer&amp;quot; &amp;quot;fiver&amp;quot;
## [109] &amp;quot;fixer&amp;quot; &amp;quot;fleer&amp;quot; &amp;quot;fleur&amp;quot; &amp;quot;flier&amp;quot; &amp;quot;flyer&amp;quot; &amp;quot;freed&amp;quot;
## [115] &amp;quot;freer&amp;quot; &amp;quot;freet&amp;quot; &amp;quot;freit&amp;quot; &amp;quot;fremd&amp;quot; &amp;quot;frere&amp;quot; &amp;quot;fried&amp;quot;
## [121] &amp;quot;frier&amp;quot; &amp;quot;frize&amp;quot; &amp;quot;fryer&amp;quot; &amp;quot;fumer&amp;quot; &amp;quot;giber&amp;quot; &amp;quot;giver&amp;quot;
## [127] &amp;quot;gluer&amp;quot; &amp;quot;grebe&amp;quot; &amp;quot;grece&amp;quot; &amp;quot;greed&amp;quot; &amp;quot;greek&amp;quot; &amp;quot;green&amp;quot;
## [133] &amp;quot;greet&amp;quot; &amp;quot;grege&amp;quot; &amp;quot;grein&amp;quot; &amp;quot;greve&amp;quot; &amp;quot;grice&amp;quot; &amp;quot;gride&amp;quot;
## [139] &amp;quot;grief&amp;quot; &amp;quot;grike&amp;quot; &amp;quot;grime&amp;quot; &amp;quot;gripe&amp;quot; &amp;quot;grize&amp;quot; &amp;quot;grued&amp;quot;
## [145] &amp;quot;gruel&amp;quot; &amp;quot;grufe&amp;quot; &amp;quot;grume&amp;quot; &amp;quot;gryce&amp;quot; &amp;quot;gryde&amp;quot; &amp;quot;gryke&amp;quot;
## [151] &amp;quot;grype&amp;quot; &amp;quot;hider&amp;quot; &amp;quot;hiker&amp;quot; &amp;quot;hiver&amp;quot; &amp;quot;huger&amp;quot; &amp;quot;hyper&amp;quot;
## [157] &amp;quot;icier&amp;quot; &amp;quot;icker&amp;quot; &amp;quot;idler&amp;quot; &amp;quot;iller&amp;quot; &amp;quot;inerm&amp;quot; &amp;quot;inert&amp;quot;
## [163] &amp;quot;infer&amp;quot; &amp;quot;inker&amp;quot; &amp;quot;inner&amp;quot; &amp;quot;inter&amp;quot; &amp;quot;inure&amp;quot; &amp;quot;irked&amp;quot;
## [169] &amp;quot;ither&amp;quot; &amp;quot;jiber&amp;quot; &amp;quot;jiver&amp;quot; &amp;quot;kiter&amp;quot; &amp;quot;kreep&amp;quot; &amp;quot;kreng&amp;quot;
## [175] &amp;quot;krewe&amp;quot; &amp;quot;liber&amp;quot; &amp;quot;lifer&amp;quot; &amp;quot;liger&amp;quot; &amp;quot;liker&amp;quot; &amp;quot;liner&amp;quot;
## [181] &amp;quot;liter&amp;quot; &amp;quot;litre&amp;quot; &amp;quot;liver&amp;quot; &amp;quot;livre&amp;quot; &amp;quot;lucre&amp;quot; &amp;quot;luger&amp;quot;
## [187] &amp;quot;luter&amp;quot; &amp;quot;luxer&amp;quot; &amp;quot;miler&amp;quot; &amp;quot;mimer&amp;quot; &amp;quot;miner&amp;quot; &amp;quot;miter&amp;quot;
## [193] &amp;quot;mitre&amp;quot; &amp;quot;mixer&amp;quot; &amp;quot;muter&amp;quot; &amp;quot;nicer&amp;quot; &amp;quot;niger&amp;quot; &amp;quot;niner&amp;quot;
## [199] &amp;quot;niter&amp;quot; &amp;quot;nitre&amp;quot; &amp;quot;nixer&amp;quot; &amp;quot;nuder&amp;quot; &amp;quot;pheer&amp;quot; &amp;quot;piert&amp;quot;
## [205] &amp;quot;piker&amp;quot; &amp;quot;piler&amp;quot; &amp;quot;piper&amp;quot; &amp;quot;plier&amp;quot; &amp;quot;plyer&amp;quot; &amp;quot;predy&amp;quot;
## [211] &amp;quot;preed&amp;quot; &amp;quot;preen&amp;quot; &amp;quot;preif&amp;quot; &amp;quot;premy&amp;quot; &amp;quot;prent&amp;quot; &amp;quot;preve&amp;quot;
## [217] &amp;quot;prexy&amp;quot; &amp;quot;price&amp;quot; &amp;quot;pride&amp;quot; &amp;quot;pried&amp;quot; &amp;quot;prief&amp;quot; &amp;quot;prier&amp;quot;
## [223] &amp;quot;prime&amp;quot; &amp;quot;prize&amp;quot; &amp;quot;prude&amp;quot; &amp;quot;prune&amp;quot; &amp;quot;pryer&amp;quot; &amp;quot;pucer&amp;quot;
## [229] &amp;quot;puker&amp;quot; &amp;quot;puler&amp;quot; &amp;quot;queer&amp;quot; &amp;quot;quern&amp;quot; &amp;quot;query&amp;quot; &amp;quot;quire&amp;quot;
## [235] &amp;quot;rheme&amp;quot; &amp;quot;rheum&amp;quot; &amp;quot;rhime&amp;quot; &amp;quot;rhine&amp;quot; &amp;quot;rhyme&amp;quot; &amp;quot;rhyne&amp;quot;
## [241] &amp;quot;riced&amp;quot; &amp;quot;ricer&amp;quot; &amp;quot;ricey&amp;quot; &amp;quot;rider&amp;quot; &amp;quot;ridge&amp;quot; &amp;quot;rieve&amp;quot;
## [247] &amp;quot;rifer&amp;quot; &amp;quot;rifle&amp;quot; &amp;quot;rifte&amp;quot; &amp;quot;riled&amp;quot; &amp;quot;riley&amp;quot; &amp;quot;rille&amp;quot;
## [253] &amp;quot;rimed&amp;quot; &amp;quot;rimer&amp;quot; &amp;quot;riped&amp;quot; &amp;quot;ripen&amp;quot; &amp;quot;riper&amp;quot; &amp;quot;rived&amp;quot;
## [259] &amp;quot;rivel&amp;quot; &amp;quot;riven&amp;quot; &amp;quot;river&amp;quot; &amp;quot;rivet&amp;quot; &amp;quot;rubel&amp;quot; &amp;quot;ruble&amp;quot;
## [265] &amp;quot;ruche&amp;quot; &amp;quot;ruder&amp;quot; &amp;quot;rudie&amp;quot; &amp;quot;ruffe&amp;quot; &amp;quot;ruled&amp;quot; &amp;quot;ruler&amp;quot;
## [271] &amp;quot;rumen&amp;quot; &amp;quot;runed&amp;quot; &amp;quot;rupee&amp;quot; &amp;quot;ryked&amp;quot; &amp;quot;rymme&amp;quot; &amp;quot;ryper&amp;quot;
## [277] &amp;quot;their&amp;quot; &amp;quot;there&amp;quot; &amp;quot;therm&amp;quot; &amp;quot;tiger&amp;quot; &amp;quot;tiler&amp;quot; &amp;quot;timer&amp;quot;
## [283] &amp;quot;titer&amp;quot; &amp;quot;titre&amp;quot; &amp;quot;treck&amp;quot; &amp;quot;treed&amp;quot; &amp;quot;treen&amp;quot; &amp;quot;treif&amp;quot;
## [289] &amp;quot;trend&amp;quot; &amp;quot;treyf&amp;quot; &amp;quot;tribe&amp;quot; &amp;quot;trice&amp;quot; &amp;quot;tride&amp;quot; &amp;quot;tried&amp;quot;
## [295] &amp;quot;trier&amp;quot; &amp;quot;trike&amp;quot; &amp;quot;trine&amp;quot; &amp;quot;tripe&amp;quot; &amp;quot;trite&amp;quot; &amp;quot;truce&amp;quot;
## [301] &amp;quot;trued&amp;quot; &amp;quot;truer&amp;quot; &amp;quot;tryer&amp;quot; &amp;quot;tryke&amp;quot; &amp;quot;tuber&amp;quot; &amp;quot;tuner&amp;quot;
## [307] &amp;quot;tuyer&amp;quot; &amp;quot;tweer&amp;quot; &amp;quot;twerk&amp;quot; &amp;quot;twerp&amp;quot; &amp;quot;twier&amp;quot; &amp;quot;twire&amp;quot;
## [313] &amp;quot;twyer&amp;quot; &amp;quot;tyler&amp;quot; &amp;quot;udder&amp;quot; &amp;quot;ulcer&amp;quot; &amp;quot;umber&amp;quot; &amp;quot;umbre&amp;quot;
## [319] &amp;quot;under&amp;quot; &amp;quot;upper&amp;quot; &amp;quot;upter&amp;quot; &amp;quot;urbex&amp;quot; &amp;quot;urdee&amp;quot; &amp;quot;ureic&amp;quot;
## [325] &amp;quot;urent&amp;quot; &amp;quot;urged&amp;quot; &amp;quot;urger&amp;quot; &amp;quot;urine&amp;quot; &amp;quot;urite&amp;quot; &amp;quot;urned&amp;quot;
## [331] &amp;quot;urped&amp;quot; &amp;quot;uteri&amp;quot; &amp;quot;utter&amp;quot; &amp;quot;viler&amp;quot; &amp;quot;viner&amp;quot; &amp;quot;viper&amp;quot;
## [337] &amp;quot;viver&amp;quot; &amp;quot;where&amp;quot; &amp;quot;wider&amp;quot; &amp;quot;wiper&amp;quot; &amp;quot;wiver&amp;quot; &amp;quot;wreck&amp;quot;
## [343] &amp;quot;wried&amp;quot; &amp;quot;wrier&amp;quot; &amp;quot;write&amp;quot; &amp;quot;wryer&amp;quot; &amp;quot;yfere&amp;quot; &amp;quot;yrent&amp;quot;
## [349] &amp;quot;yrneh&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For my second guess I used &lt;code&gt;upter&lt;/code&gt; and I got ‚Äù üü® ‚¨ú ‚¨ú üü® üü®‚Äù&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;helper$update(&amp;quot;upter&amp;quot;, c(&amp;#39;yellow&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;yellow&amp;#39;))
helper$words&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;brule&amp;quot; &amp;quot;brume&amp;quot; &amp;quot;crude&amp;quot; &amp;quot;cruve&amp;quot; &amp;quot;emure&amp;quot; &amp;quot;enure&amp;quot; &amp;quot;enurn&amp;quot;
##  [8] &amp;quot;exurb&amp;quot; &amp;quot;grufe&amp;quot; &amp;quot;grume&amp;quot; &amp;quot;inure&amp;quot; &amp;quot;lucre&amp;quot; &amp;quot;quern&amp;quot; &amp;quot;query&amp;quot;
## [15] &amp;quot;quire&amp;quot; &amp;quot;rheum&amp;quot; &amp;quot;ruble&amp;quot; &amp;quot;ruche&amp;quot; &amp;quot;rudie&amp;quot; &amp;quot;ruffe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number of candidates has been reduced enormously. In the next round, I tried &lt;code&gt;query&lt;/code&gt; and that solved it.&lt;/p&gt;
&lt;p&gt;Obviously, the game‚Äôs &lt;em&gt;strategy&lt;/em&gt; is encoded in how to choose the next guess from the list of candidate words given the restrictions so far. Let‚Äôs try different choices.&lt;/p&gt;
&lt;div id=&#34;random-choice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Random choice&lt;/h2&gt;
&lt;p&gt;The first and obvious choice is to choose randomly from the list of candidates. First we code the game using the &lt;code&gt;wordle&lt;/code&gt; package and the &lt;code&gt;WordleGame&lt;/code&gt; class. We are going to modify &lt;a href=&#34;https://github.com/mjskay/wordle_solver&#34;&gt;the code&lt;/a&gt; from
Matthew Kay to define a function that plays the game for a given word:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;play_game &amp;lt;- function(word,first_guess,quiet=FALSE){
  helper = WordleHelper$new(nchar = nchar(word)) #initialize the game
  game = WordleGame$new(helper$words, target_word = word)
  
  #make the first guess
  if (!is.null(first_guess)) {
    helper$update(first_guess, 
                  game$try(first_guess, quiet = quiet))
  }
  
  #iterate until solved
  while (!game$is_solved()) {
    guess = score_words(helper$words)$word[[1]] #choose next guess
    helper$update(guess, game$try(guess,quiet=quiet))
  }
  game$attempts
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see in every step we &lt;em&gt;score&lt;/em&gt; the words and return the one with maximum score. To start, we are going to select them randomly:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;score_words &amp;lt;- function(words){
  data.frame(word=words,score=runif(length(words))) %&amp;gt;% arrange(score)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs try it out for Jan 10 word&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
answer &amp;lt;- play_game(word=&amp;quot;query&amp;quot;,first_guess=&amp;quot;aeros&amp;quot;,quiet=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the unicode does not render properly in markdown, here is screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;screenshot.png&#34; style=&#34;width:50.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not bad, we got the solution in 4 tries.&lt;/p&gt;
&lt;p&gt;How good is this strategy? We need to define an performance metric to evaluate each strategy. &lt;strong&gt;Edited&lt;/strong&gt; As with any algorithm, we can test its performance measuring how well does the strategy against a sample of chosen target words. We are going to take three of them&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first one is against a random choice of target word from the dictionary of 5 letters in English. There are 12972 words to choose from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, in the original game, Wardle narrowed down the list of Wordle words to about 2500. So we will evaluate how well our strategy does against this list. You can download the list of possible answers &lt;a href=&#34;./data/possible_answers.csv&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possible_answers &amp;lt;- read.csv(&amp;quot;./data/possible_answers.txt&amp;quot;,header=F)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Finally, we can measure how well the strategy performs for the past wordle answers. [&lt;strong&gt;Caution: this contains spoilers!&lt;/strong&gt;]. Lucky for us Matthew Kay has compiled a list of them, to which I added the last ones &lt;a href=&#34;./data/past_answers.csv&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;past_answers &amp;lt;- read.csv(&amp;quot;./data/past_answers.csv&amp;quot;,header=F)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs evaluate each performance metric. First a random sample of words from the dictionary (only 1000).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
helper = WordleHelper$new(nchar = 5)
dictionary &amp;lt;- helper$words
first_guess &amp;lt;- &amp;quot;aeros&amp;quot;
dictionary_games &amp;lt;- sapply(sample(dictionary,1000),
                  \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now for the possible answers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possible_answers_games &amp;lt;- sapply(possible_answers[,1],
                  \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally for the previous wordle answers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;past_answers_games &amp;lt;- sapply(past_answers[,1],
                  \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How well did they do? Here is the distribution of the number of tries for each case&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bind_rows(tibble(selection=&amp;quot;Dictionary&amp;quot;,tries=dictionary_games),
          tibble(selection=&amp;quot;Possible answers&amp;quot;,tries=possible_answers_games),
          tibble(selection=&amp;quot;Past answers&amp;quot;,tries=past_answers_games)) %&amp;gt;%
  group_by(selection,tries) %&amp;gt;% 
  summarise(n=n()) %&amp;gt;% mutate(freq=n/sum(n)) %&amp;gt;% 
  ggplot(aes(x=tries,y=freq,fill=selection)) + 
    geom_bar(position=&amp;quot;dodge&amp;quot;,stat=&amp;quot;identity&amp;quot;) +
    labs(x=&amp;quot;Tries&amp;quot;,fill=&amp;quot;&amp;quot;,y=&amp;quot;Frequency&amp;quot;,title=&amp;quot;Using random words&amp;quot;) +
    scale_fill_tableau() +
    geom_vline(xintercept = 6.5,linetype=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not bad! Most of the time, we solved the game in 6 or fewer tries. Actually, we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(&amp;quot;Dictionary&amp;quot;=dictionary_games,
     &amp;quot;Possible answers&amp;quot;=possible_answers_games,
     &amp;quot;Past answers&amp;quot;=past_answers_games) %&amp;gt;%
  map_dfr(\(answers) tibble(&amp;quot;Average number of tries&amp;quot;=round(mean(answers),2),
                            &amp;quot;Probability of winning (%)&amp;quot;=round(mean(answers&amp;lt;7)*100,2)),
          .id=&amp;quot;Selection&amp;quot;) %&amp;gt;% 
  kableExtra::kbl() %&amp;gt;%
  kableExtra::kable_paper(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = F)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Selection
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Average number of tries
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Probability of winning (%)
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
83.50
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88.86
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Past answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.78
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
89.37
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see random guessing is already a good strategy, solving it in less than 6 tries 82% of the times (for random words in the dictionary) and around 89% for the list of possible and past answers. But let‚Äôs see if we can do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-frequency-of-words&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the frequency of words&lt;/h2&gt;
&lt;p&gt;(&lt;strong&gt;Edited&lt;/strong&gt;) One of the most interesting findings about the game (rediscovered by Matthew Kay) is that the answers each day are not chosen randomly from the list of possible 5 letter words in the English dictionary. The very Wardle said in &lt;a href=&#34;https://www.nytimes.com/2022/01/03/technology/wordle-word-game-creator.html&#34;&gt;an interview in the New York Times&lt;/a&gt; that &lt;em&gt;he narrowed down the list of Wordle words to about 2,500&lt;/em&gt; which are most likely to be known by his partner (the first recipient of the game). That means that there are some words that have more probability to be the target word each day than others. To see that, we will plot the distributions of the rank of the past answers in the corpus of words of English. We are going to use two sources: the &lt;a href=&#34;https://www.kaggle.com/rtatman/english-word-frequency&#34;&gt;corpus of commonly-used words from the Google Web Trillion Word Corpus&lt;/a&gt; and the &lt;a href=&#34;http://ucrel.lancs.ac.uk/bncfreq/flists.html&#34;&gt;BNC word frequency list&lt;/a&gt; and put them together:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;helper = WordleHelper$new(nchar = 5)
freq = tibble(word = helper$words) %&amp;gt;%
  left_join(read.csv(&amp;quot;./data/unigram_freq.csv&amp;quot;), by = &amp;quot;word&amp;quot;) %&amp;gt;%
  left_join(
    read.csv(&amp;quot;./data/bnc_freq.csv&amp;quot;) %&amp;gt;%
      group_by(word) %&amp;gt;%
      summarise(count = sum(count)),
    by = &amp;quot;word&amp;quot;
  ) %&amp;gt;%
  mutate(
    count.x = ifelse(is.na(count.x), 0, count.x),
    count.y = ifelse(is.na(count.y), 0, count.y),
    count = count.x/sum(count.x) + count.y/sum(count.y),
    # need a nonzero count for all words, so just assume words that don&amp;#39;t
    # appear at all are half as frequent as the least frequent appearing word
    count = ifelse(count == 0, min(count[count != 0])/2, count),
    # rough log of the count shifted above 0
    # (we&amp;#39;ll want this later)
    log_count = log(count) - log(min(count)/2),
    rank = rank(-count,ties.method = &amp;quot;random&amp;quot;,)
  ) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following graph compares the distribution of ranks of randomly selected words in the wordle dictionary (flat) with the one of the past answers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + geom_density(data=freq,aes(x=rank,col=&amp;quot;All words&amp;quot;),bw=10) +
  geom_density(data=freq %&amp;gt;% filter(word %in% past_answers[,1]),
               aes(x=rank,col=&amp;quot;Past answers&amp;quot;),bw=10)+
  scale_color_tableau() + labs(col=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;
Most of the target words in the past answers are chosen from the most frequent words in English. The distribution decays slowly, which means that some unusual (rank &amp;gt; 10000) words are likely. As Matthew suggests, ‚Äúthis is probably a sensible word selection strategy for making a good game, since it makes the puzzle not just a bunch of very common words (but also not just a bunch of rare words).‚Äù&lt;/p&gt;
&lt;p&gt;But this information is quite useful since it tells us that the game is designed with a bias that we can exploit to design a better strategy. Specifically, we will choose the next guess as the most frequent word of the candidates in each step. Let‚Äôs modify the score function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;score_words &amp;lt;- function(words){
  ff &amp;lt;- freq %&amp;gt;% filter(word %in% words)
  ff %&amp;gt;% arrange(rank)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and play again the word for Jan 10&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;answer &amp;lt;- play_game(word=&amp;quot;query&amp;quot;,first_guess=&amp;quot;aeros&amp;quot;,quiet=)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [38;5;232m[48;5;249m a [48;5;226m e [48;5;226m r [48;5;249m o [48;5;249m s [39m[49m 
## [38;5;232m[48;5;249m t [48;5;249m h [48;5;46m e [48;5;46m r [48;5;249m e [39m[49m 
## [38;5;232m[48;5;46m q [48;5;46m u [48;5;46m e [48;5;46m r [48;5;46m y [39m[49m&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time we solve the puzzle in 3 tries. How good is this strategy? We analyzed it using the same metrics as before. For the random choice of target word we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
helper = WordleHelper$new(nchar = 5)
dictionary &amp;lt;- helper$words
first_guess &amp;lt;- &amp;quot;aeros&amp;quot;
dictionary_games &amp;lt;- sapply(sample(dictionary,1000),
                    \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                  error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now for the possible answers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possible_answers_games &amp;lt;- sapply(possible_answers[,1],
                    \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                  error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally for the previous wordle answers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;past_answers_games &amp;lt;- sapply(past_answers[,1],
                    \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                  error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the distribution of the number of tries for each&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bind_rows(tibble(selection=&amp;quot;Dictionary&amp;quot;,tries=dictionary_games),
          tibble(selection=&amp;quot;Possible answers&amp;quot;,tries=possible_answers_games),
          tibble(selection=&amp;quot;Past answers&amp;quot;,tries=past_answers_games)) %&amp;gt;%
  group_by(selection,tries) %&amp;gt;% 
  summarise(n=n()) %&amp;gt;% mutate(freq=n/sum(n)) %&amp;gt;% 
  ggplot(aes(x=tries,y=freq,fill=selection)) + 
    geom_bar(position=&amp;quot;dodge&amp;quot;,stat=&amp;quot;identity&amp;quot;) +
    labs(x=&amp;quot;Tries&amp;quot;,fill=&amp;quot;&amp;quot;,y=&amp;quot;&amp;quot;,title=&amp;quot;Using word frequency&amp;quot;) +
    scale_fill_tableau() +
    geom_vline(xintercept = 6.5,linetype=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see, the strategy is much better for past answers and it solves it less tries. Actually we get that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(&amp;quot;Dictionary&amp;quot;=dictionary_games,
     &amp;quot;Possible answers&amp;quot;=possible_answers_games,
     &amp;quot;Past answers&amp;quot;=past_answers_games) %&amp;gt;%
  map_dfr(\(answers) tibble(&amp;quot;Average number of tries&amp;quot;=round(mean(answers),2),
                            &amp;quot;Probability of winning (%)&amp;quot;=round(mean(answers&amp;lt;7)*100,2)),
          .id=&amp;quot;Selection&amp;quot;) %&amp;gt;% 
  kableExtra::kbl() %&amp;gt;%
  kableExtra::kable_paper(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = F)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Selection
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Average number of tries
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Probability of winning (%)
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.40
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
96.85
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Past answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.10
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This means that we could have solved the game 97% of the time using this strategy. On average, using this strategy we will lose once a month only. Not bad for this simple strategy!&lt;/p&gt;
&lt;p&gt;Of course, more complicated strategies can be implemented. For example, occasionally, our next guess could be a word that does not contain the letters found so far. That helps in situations where only a letter remains to be identified but many words are compatible with the ones found so far.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edited&lt;/strong&gt; Another possibility is to simulate the game forward. Given our final guess (e.g &lt;code&gt;aeros&lt;/code&gt;) we could choose the next guess by simulate the game forward using all possible candidates and getting the one that maximizes some kind of entropy or probability. This is actually the idea behind &lt;a href=&#34;https://github.com/LaurentLessard/wordlesolver&#34;&gt;some strategies&lt;/a&gt; that can reach even 100% winning probability. However, they are computationally expensive.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;choosing-the-best-initial-guess&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Choosing the best initial guess&lt;/h2&gt;
&lt;p&gt;Without modifying our strategy for our guess in each round, the only free choice we have is the initial guess we start with. In the examples above, we chose &lt;code&gt;aeros&lt;/code&gt;, and it was intended. If we want to maximize the number of found letters from the beginning, our initial guess could be a word that contains the most frequent letters in English dictionary or in the past answers.&lt;/p&gt;
&lt;p&gt;We can calculate these frequencies&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dist_letters_dictionary &amp;lt;- unlist(strsplit(dictionary,&amp;quot;&amp;quot;)) %&amp;gt;% 
  table() %&amp;gt;% data.frame() %&amp;gt;% rename(letter=1) %&amp;gt;% 
  mutate(dens=Freq/sum(Freq),corpus=&amp;quot;Dictionary&amp;quot;)
dist_letters_possible &amp;lt;- unlist(strsplit(possible_answers[,1],&amp;quot;&amp;quot;)) %&amp;gt;% 
  table() %&amp;gt;% data.frame() %&amp;gt;% rename(letter=1) %&amp;gt;% 
  mutate(dens=Freq/sum(Freq),corpus=&amp;quot;Possible answers&amp;quot;)
dist_letters_past &amp;lt;- unlist(strsplit(past_answers[,1],&amp;quot;&amp;quot;)) %&amp;gt;% 
  table() %&amp;gt;% data.frame() %&amp;gt;% rename(letter=1) %&amp;gt;% 
  mutate(dens=Freq/sum(Freq),corpus=&amp;quot;Past answers&amp;quot;)
dists &amp;lt;- rbind(dist_letters_dictionary,
               dist_letters_possible,
               dist_letters_past)
ggplot(dists) + 
  geom_bar(aes(x=reorder(letter,-dens),y=dens,fill=corpus),
                         position=&amp;quot;dodge&amp;quot;,stat=&amp;quot;identity&amp;quot;)+
  scale_fill_tableau() + labs(x=&amp;quot;Letter&amp;quot;,y=&amp;quot;Frequency&amp;quot;) +
  scale_y_continuous(labels=scales::percent)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;
Most frequent letters are vowels (&lt;code&gt;e&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;) and usual consonants like &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt;. In the dictionary, these are the top 5 most frequent letters&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dist_letters_dictionary %&amp;gt;% arrange(-dens) %&amp;gt;% head(5) %&amp;gt;% 
  kableExtra::kbl() %&amp;gt;%
  kableExtra::kable_paper(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = F)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
letter
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Freq
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
dens
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
corpus
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
s
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6665
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1027598
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
e
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6662
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1027135
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
a
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5990
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0923528
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
o
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4438
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0684243
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
r
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4158
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0641073
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is why I chose &lt;code&gt;aeros&lt;/code&gt; as the initial guess. However, we know the words are not chosen randomly from the dictionary. In fact for the possible answers the top 5 letters are&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dist_letters_possible %&amp;gt;% arrange(-dens) %&amp;gt;% head(5) %&amp;gt;% 
  kableExtra::kbl() %&amp;gt;%
  kableExtra::kable_paper(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = F)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
letter
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Freq
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
dens
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
corpus
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
e
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1233
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1065227
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
a
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
979
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0845788
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
r
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
899
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0776674
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
o
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
754
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0651404
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
t
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
729
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0629806
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;See, no &lt;code&gt;s&lt;/code&gt;, but a &lt;code&gt;t&lt;/code&gt; instead. These are the words that contain these 5 letters:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dictionary[grepl(&amp;quot;e&amp;quot;,dictionary) &amp;amp; grepl(&amp;quot;r&amp;quot;,dictionary) &amp;amp; 
             grepl(&amp;quot;a&amp;quot;,dictionary) &amp;amp; grepl(&amp;quot;o&amp;quot;,dictionary) &amp;amp; 
             grepl(&amp;quot;t&amp;quot;,dictionary)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;oater&amp;quot; &amp;quot;orate&amp;quot; &amp;quot;roate&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs see how good is the strategy we tried before with &lt;code&gt;orate&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
helper = WordleHelper$new(nchar = 5)
dictionary &amp;lt;- helper$words
first_guess &amp;lt;- &amp;quot;orate&amp;quot;
dictionary_games &amp;lt;- sapply(sample(dictionary,1000),
                     \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                   error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now for the possible answers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possible_answers_games &amp;lt;- sapply(possible_answers[,1],
                     \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                   error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally for the previous wordle answers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;past_answers_games &amp;lt;- sapply(past_answers[,1],
                     \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                   error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which gives the following metrics&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(&amp;quot;Dictionary&amp;quot;=dictionary_games,
     &amp;quot;Possible answers&amp;quot;=possible_answers_games,
     &amp;quot;Past answers&amp;quot;=past_answers_games) %&amp;gt;%
  map_dfr(\(answers) tibble(&amp;quot;Average number of tries&amp;quot;=round(mean(answers),2),
                            &amp;quot;Probability of winning (%)&amp;quot;=round(mean(answers&amp;lt;7)*100,2)),
          .id=&amp;quot;Selection&amp;quot;) %&amp;gt;% 
  kableExtra::kbl() %&amp;gt;%
  kableExtra::kable_paper(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = F)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Selection
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Average number of tries
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Probability of winning (%)
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
87.80
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.28
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Past answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99.03
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Wow! 99% with this initial guess for the past and 97% for all the possible solutions. This is around 2% increase from &lt;code&gt;aeros&lt;/code&gt; just by choosing a different word. It means (roughly) losing once every 100 games. Be aware that it could be an statistical fluke. More data (more games) are needed to assess if that increase is significant.&lt;/p&gt;
&lt;p&gt;Here we have assumed that each letter has independent frequencies of appearance in a word, but in reality there could be patterns (two or three letters) which are more frequent that could be exploited to get better initial guess.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;adversarial-word-selection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Adversarial word selection&lt;/h1&gt;
&lt;p&gt;Finally, we can investigate how well our strategy plays against an adversarial Wordle in which target words are chosen inversely proportional to their frequency in English. That is, if the target words are rare words in English. Let‚Äôs first construct a list of potential target words&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
adversarial_answers &amp;lt;- sample(freq$word,prob = 1/freq$log_count,size = 1000)
head(adversarial_answers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;erbia&amp;quot; &amp;quot;socas&amp;quot; &amp;quot;biach&amp;quot; &amp;quot;allyl&amp;quot; &amp;quot;imaum&amp;quot; &amp;quot;skink&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, this method selects as target some unsual words in english like &lt;code&gt;erbia&lt;/code&gt; (oxide or erbium) or &lt;code&gt;allyl&lt;/code&gt; (a chemistry radical). Let‚Äôs see how the frequency of this words compares to the solutions and/or the dictionary&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() + geom_density(data=freq,aes(x=rank,col=&amp;quot;All words&amp;quot;),bw=10) +
  geom_density(data=freq %&amp;gt;% filter(word %in% past_answers[,1]),
               aes(x=rank,col=&amp;quot;Past answers&amp;quot;),bw=10)+
  geom_density(data=freq %&amp;gt;% filter(word %in% adversarial_answers),
               aes(x=rank,col=&amp;quot;Adversarial answers&amp;quot;),bw=10)+
  scale_color_tableau() + labs(col=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/post/2022-01-10-wordle/index_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;
As we can see this method selects words which have very small frequency, or large rank in the use of English.&lt;/p&gt;
&lt;p&gt;Let‚Äôs play against them&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adversarial_answers_games &amp;lt;- sapply(adversarial_answers,
                    \(w) tryCatch(length(play_game(w,first_guess,quiet=T)),
                                  error=function(e) NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and here is how it compares to the previous choices of target words&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(&amp;quot;Dictionary&amp;quot;=dictionary_games,
     &amp;quot;Possible answers&amp;quot;=possible_answers_games,
     &amp;quot;Past answers&amp;quot;=past_answers_games,
     &amp;quot;Adversarial answers&amp;quot;=adversarial_answers_games) %&amp;gt;%
  map_dfr(\(answers) tibble(&amp;quot;Average number of tries&amp;quot;=round(mean(answers,),2),
                            &amp;quot;Probability of winning (%)&amp;quot;=round(mean(answers&amp;lt;7)*100,2)),
          .id=&amp;quot;Selection&amp;quot;) %&amp;gt;% 
  kableExtra::kbl() %&amp;gt;%
  kableExtra::kable_paper(bootstrap_options = &amp;quot;striped&amp;quot;, full_width = F)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34; lightable-paper&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Selection
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Average number of tries
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Probability of winning (%)
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dictionary
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
87.80
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Possible answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.28
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Past answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99.03
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Adversarial answers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.50
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see the probability of winning decreases to 81% only, that is, losing 1 out of every 5 days. This probability is smaller than choosing randomly our guess, which means that the strategy we have (choosing words according to the frequency in English) can fail for specific targeted adversarial games.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The strategy shown here only works because it exploits the bias in how the target word is chosen. If the designer of the game decides to change this, the performance will be different. For example, if words are randomly selected from the English dictionary the strategy here drops to 82%, not bad but means losing once every 5 days.&lt;/p&gt;
&lt;p&gt;Without any change, we still can win most of the times by using &lt;code&gt;orate&lt;/code&gt; and choosing the most frequent words in English in each round. And that ends my orating about Wordle for today.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Personal Art Map with R</title>
      <link>http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r/</guid>
      <description>&lt;script src=&#34;http://estebanmoro.org/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://estebanmoro.org/rmarkdown-libs/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;p&gt;Map art makes beautiful posters. You can find &lt;a href=&#34;https://www.google.com/search?q=map+art&amp;amp;client=safari&amp;amp;rls=en&amp;amp;sxsrf=ALeKk01Ce8a8IaqjUQbnAyamSAgqbV6hPg:1603129236599&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=2ahUKEwiakrTlmcHsAhUGWN8KHbBiBV0Q_AUoAnoECA0QBA&amp;amp;biw=1324&amp;amp;bih=969&#34;&gt;them all over the internet&lt;/a&gt; and buy them even framed for your favorite city, area or country. Those posters&#39; beauty relies on the intricate and beautiful pattern of roads, buildings, parks, rivers, etc., which shape our cities and our mobility. In my &lt;a href=&#34;https://inequality.media.mit.edu&#34;&gt;research&lt;/a&gt; I constantly use those maps as the hardware fabric in which humans interact, move or encounter in urban settings. However, we found that each of us has a distinct mobility pattern around cities, so even people living in the same neighborhood experience the city in a different way.&lt;/p&gt;
&lt;p&gt;For my map art, I wanted to create something more personal: a combination of those beautiful street maps with personal mobility. That is, the city and how we navigate it. In this tutorial, you&amp;rsquo;ll learn how to create those street maps for your city and your mobility. We will use data from &lt;a href=&#34;https://www.openstreetmap.org/&#34;&gt;Open Street Maps&lt;/a&gt; (OSM) and, of course, &lt;code&gt;R&lt;/code&gt;. We will also use personal mobility data, which you can input manually. Still, we will learn too how to get it from Google Maps Timeline (if you have your location activated). Part of the material here is based on the &lt;a href=&#34;https://ggplot2tutor.com/author&#34;&gt;tutorial by Christian Burkhart&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-the-streetmap&#34;&gt;Creating the streetmap&lt;/h2&gt;
&lt;p&gt;The first thing will be to get a beautiful map of a given city&amp;rsquo;s streets and boundaries. In this case, Boston, the place where I live. To download the streets, we use the &lt;code&gt;osmdata&lt;/code&gt; package to query OSM. First, we define our bounding box, i.e. the area where we are going to query OSM:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(osmdata)
bbx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getbb&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Boston, MA&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But sometimes you want a more specific area, and you can create your own bounding box:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;min_lon &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-71.28735&lt;/span&gt;; max_lon &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-70.900578&lt;/span&gt;
min_lat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42.245838&lt;/span&gt;; max_lat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42.453673&lt;/span&gt;
bbx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(min_lon,max_lon),y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(min_lat,max_lat))
&lt;span style=&#34;color:#a6e22e&#34;&gt;colnames&lt;/span&gt;(bbx) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OSM data has many layers (or &amp;ldquo;features&amp;rdquo;). You can find them &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Map_Features&#34;&gt;here&lt;/a&gt;. They go from railways, vegetation to streets or points of interest. Let&amp;rsquo;s see how many of them are related to &lt;code&gt;highway&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;available_tags&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;highway&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## # A tibble: 53 √ó 2
##    Key     Value                 
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                 
##  1 highway bridleway             
##  2 highway bus_guideway          
##  3 highway bus_stop              
##  4 highway busway                
##  5 highway construction          
##  6 highway corridor              
##  7 highway crossing              
##  8 highway cycleway              
##  9 highway elevator              
## 10 highway emergency_access_point
## # ‚Ñπ 43 more rows
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;They are a lot of them, but the main ones are &lt;code&gt;motorway&lt;/code&gt;, &lt;code&gt;trunk&lt;/code&gt;, &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;secondary&lt;/code&gt;, &lt;code&gt;tertiary&lt;/code&gt; that distinguish between highways and other roads conecting cities or small towns. Let&amp;rsquo;s collect them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;highways &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; bbx &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;opq&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_osm_feature&lt;/span&gt;(key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;highway&amp;#34;&lt;/span&gt;, 
                  value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;motorway&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;trunk&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;primary&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secondary&amp;#34;&lt;/span&gt;, 
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tertiary&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;motorway_link&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;trunk_link&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;primary_link&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secondary_link&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tertiary_link&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;osmdata_sf&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have 182 lines. Let&amp;rsquo;s have a look at them. We color them according to the label &lt;code&gt;highway&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(sf)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; highways&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;highway),
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;p&gt;But we are also going to use the small streets, pedestrian paths or living streets that connect our neighborhoods (be advised, this is a large query so you might probably want to save it for later)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;streets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; bbx &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;opq&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_osm_feature&lt;/span&gt;(key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;highway&amp;#34;&lt;/span&gt;, 
                  value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;residential&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;living_street&amp;#34;&lt;/span&gt;,
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unclassified&amp;#34;&lt;/span&gt;,
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pedestrian&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;footway&amp;#34;&lt;/span&gt;,
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;track&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;osmdata_sf&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time, we have 286 lines. Let&amp;rsquo;s have a look at them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; streets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;highway),
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;p&gt;Those maps are already beautiful, right? You probably can see a darker area downtown Boston and Cambridge because of the larger street density there.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s combine them and have different width for the highways and streets to highlight highways&#39; importance. At the same time, let&amp;rsquo;s crop the streets to show only those within the bounding box.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;color_roads &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.42&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.449&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.488&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; streets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; color_roads,
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; highways&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; color_roads,
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.6&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(min_lon,max_lon),
           ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(min_lat,max_lat),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;h2 id=&#34;adding-the-geography&#34;&gt;Adding the geography&lt;/h2&gt;
&lt;p&gt;Although those maps are very informative, they lack a crucial component of the geography: the land, rivers, coastlines that define our cities. In the maps of Boston above, you are probably missing the Charles River&amp;rsquo;s shape or those of the beautiful &lt;a href=&#34;https://www.bostonharborislands.org&#34;&gt;Boston Harbor Islands&lt;/a&gt;. In most maps around the internet, you will find those geographies are included using &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Tiles&#34;&gt;tiles&lt;/a&gt;, which are basically a raster layer of images with different characteristics (names of the places, POI, etc). However, since we are going to print these maps in a large format, we need a better resolution that typically those image tiles provide. Ideally, we would like vector graphics like the lines we downloaded from OSM.&lt;/p&gt;
&lt;p&gt;Instead of using raster images, we are going to use the polygons for the different counties around the Boston Area. The US Census has an amazing service called &lt;a href=&#34;https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html&#34;&gt;Tiger&lt;/a&gt; to retrieve those boundaries in ESRI&amp;rsquo;s shapefile format. In &lt;code&gt;R&lt;/code&gt;, we can access those shapefiles using the &lt;code&gt;tigris&lt;/code&gt; package. For example, these are the counties in the state of Massachusetts for the same bounding box as before:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(tigris)
counties_MA &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;counties&lt;/span&gt;(state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MA&amp;#34;&lt;/span&gt;,cb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;T,class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sf&amp;#34;&lt;/span&gt;,)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## 
  |                                                        
  |                                                  |   0%
  |                                                        
  |                                                  |   1%
  |                                                        
  |=                                                 |   1%
  |                                                        
  |=                                                 |   2%
  |                                                        
  |=                                                 |   3%
  |                                                        
  |==                                                |   3%
  |                                                        
  |==                                                |   4%
  |                                                        
  |==                                                |   5%
  |                                                        
  |===                                               |   6%
  |                                                        
  |===                                               |   7%
  |                                                        
  |====                                              |   7%
  |                                                        
  |====                                              |   8%
  |                                                        
  |=====                                             |   9%
  |                                                        
  |=====                                             |  10%
  |                                                        
  |======                                            |  11%
  |                                                        
  |======                                            |  12%
  |                                                        
  |==========                                        |  20%
  |                                                        
  |==========                                        |  21%
  |                                                        
  |===========                                       |  21%
  |                                                        
  |===========                                       |  22%
  |                                                        
  |===========                                       |  23%
  |                                                        
  |============                                      |  25%
  |                                                        
  |==============                                    |  28%
  |                                                        
  |===============                                   |  29%
  |                                                        
  |===============                                   |  30%
  |                                                        
  |===============                                   |  31%
  |                                                        
  |================                                  |  31%
  |                                                        
  |================                                  |  32%
  |                                                        
  |=================                                 |  33%
  |                                                        
  |=================                                 |  34%
  |                                                        
  |=================                                 |  35%
  |                                                        
  |===================                               |  37%
  |                                                        
  |=====================                             |  42%
  |                                                        
  |=======================                           |  45%
  |                                                        
  |==========================                        |  51%
  |                                                        
  |==========================                        |  53%
  |                                                        
  |===========================                       |  54%
  |                                                        
  |===========================                       |  55%
  |                                                        
  |============================                      |  56%
  |                                                        
  |==============================                    |  59%
  |                                                        
  |=================================                 |  66%
  |                                                        
  |=================================                 |  67%
  |                                                        
  |==================================                |  67%
  |                                                        
  |==================================                |  68%
  |                                                        
  |==================================                |  69%
  |                                                        
  |===================================               |  69%
  |                                                        
  |====================================              |  72%
  |                                                        
  |=====================================             |  75%
  |                                                        
  |======================================            |  75%
  |                                                        
  |======================================            |  76%
  |                                                        
  |======================================            |  77%
  |                                                        
  |=======================================           |  77%
  |                                                        
  |=======================================           |  78%
  |                                                        
  |========================================          |  80%
  |                                                        
  |========================================          |  81%
  |                                                        
  |=========================================         |  81%
  |                                                        
  |=========================================         |  82%
  |                                                        
  |=========================================         |  83%
  |                                                        
  |==========================================        |  83%
  |                                                        
  |==========================================        |  84%
  |                                                        
  |=============================================     |  89%
  |                                                        
  |=============================================     |  90%
  |                                                        
  |=============================================     |  91%
  |                                                        
  |==============================================    |  91%
  |                                                        
  |==============================================    |  92%
  |                                                        
  |==============================================    |  93%
  |                                                        
  |===============================================   |  94%
  |                                                        
  |================================================  |  95%
  |                                                        
  |================================================  |  96%
  |                                                        
  |================================================= |  98%
  |                                                        
  |================================================= |  99%
  |                                                        
  |==================================================| 100%
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;counties_MA &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;st_crop&lt;/span&gt;(counties_MA,
                       xmin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min_lon,xmax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_lon,
                       ymin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min_lat,ymax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_lat)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;,lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
         ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;p&gt;We can see the coastline and some of the Boston Harbor Islands, but the Charles River or the ponds around Boston are missing. Also, note that the resolution is very low. The &lt;code&gt;tigris&lt;/code&gt; library calls the TIGER API using the default (maximum) resolution &lt;code&gt;500k&lt;/code&gt; (1:500k), which is not enough for our high-resolution map.&lt;/p&gt;
&lt;p&gt;To get a better geography layer we are going to carve out the shapefile of the area of water from these polygons. The water shapefiles can be also obtained from the TIGER services. Fortunately, those water lines have a much better resolution than the counties shapefiles.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;get_water &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(county_GEOID){
  &lt;span style=&#34;color:#a6e22e&#34;&gt;area_water&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MA&amp;#34;&lt;/span&gt;, county_GEOID, class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sf&amp;#34;&lt;/span&gt;)
}
water &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do.call&lt;/span&gt;(rbind, 
                 &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(counties_MA&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;COUNTYFP,get_water))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## 
  |                                                        
  |                                                  |   0%
  |                                                        
  |===                                               |   6%
  |                                                        
  |=============                                     |  26%
  |                                                        
  |=================                                 |  33%
  |                                                        
  |=================                                 |  35%
  |                                                        
  |==============================                    |  61%
  |                                                        
  |==================================                |  68%
  |                                                        
  |==============================================    |  92%
  |                                                        
  |==================================================|  99%
  |                                                        
  |==================================================| 100%
## 
  |                                                        
  |                                                  |   0%
  |                                                        
  |                                                  |   1%
  |                                                        
  |=====================                             |  42%
  |                                                        
  |==================================================| 100%
## 
  |                                                        
  |                                                  |   0%
  |                                                        
  |========================                          |  48%
  |                                                        
  |=========================                         |  50%
  |                                                        
  |==================================                |  67%
  |                                                        
  |================================================  |  97%
  |                                                        
  |==================================================| 100%
## 
  |                                                        
  |                                                  |   0%
  |                                                        
  |=                                                 |   1%
  |                                                        
  |==                                                |   4%
  |                                                        
  |=====                                             |  10%
  |                                                        
  |======                                            |  12%
  |                                                        
  |==========================                        |  52%
  |                                                        
  |==================================                |  68%
  |                                                        
  |======================================            |  76%
  |                                                        
  |========================================          |  81%
  |                                                        
  |==========================================        |  83%
  |                                                        
  |==============================================    |  93%
  |                                                        
  |================================================  |  95%
  |                                                        
  |==================================================| 100%
## 
  |                                                        
  |                                                  |   0%
  |                                                        
  |===========                                       |  23%
  |                                                        
  |=======================                           |  46%
  |                                                        
  |==================================================| 100%
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;water &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;st_crop&lt;/span&gt;(water,
                 xmin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min_lon,xmax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_lon,
                 ymin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min_lat,ymax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_lat)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s have a look at them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;water,
          inherit.aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F,
          col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
         ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;p&gt;Finally, let&amp;rsquo;s carve out the water polygons from the counties polygons.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;st_erase &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x, y) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;st_difference&lt;/span&gt;(x, &lt;span style=&#34;color:#a6e22e&#34;&gt;st_union&lt;/span&gt;(y))
}
counties_MA &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;st_erase&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;st_union&lt;/span&gt;(counties_MA),water)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which looks like this (not showing the lines between counties)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,
          lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
         ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/fig.wi-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;p&gt;We can play now with the different colors for the water or land. Apart from the one above, I like these combinations (you might notice still the lines between counties. Don&amp;rsquo;t worry, they disappear when we print them in large format):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,
          inherit.aes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.203&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.234&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.277&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
         ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(panel.background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
          &lt;span style=&#34;color:#a6e22e&#34;&gt;element_rect&lt;/span&gt;(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.92&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.679&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.105&lt;/span&gt;)))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggtitle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dark + Yellow theme&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;1344&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,
          inherit.aes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
         ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(panel.background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
          &lt;span style=&#34;color:#a6e22e&#34;&gt;element_rect&lt;/span&gt;(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;)))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggtitle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Black + White theme&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;1344&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,
          inherit.aes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
         ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
         expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(panel.background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;element_rect&lt;/span&gt;(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggtitle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;White + Black theme&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;1344&#34; /&gt;
&lt;h2 id=&#34;putting-geography-and-streets-together&#34;&gt;Putting geography and streets together&lt;/h2&gt;
&lt;p&gt;Once we have the geography, we can add the streets for our final streetmap:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,
          inherit.aes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.203&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.234&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.277&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; streets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          inherit.aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;color_roads,
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; highways&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          inherit.aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;color_roads,
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.6&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
           ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
           expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(panel.background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
          &lt;span style=&#34;color:#a6e22e&#34;&gt;element_rect&lt;/span&gt;(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.92&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.679&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.105&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;1344&#34; /&gt;
&lt;h2 id=&#34;adding-personal-mobility&#34;&gt;Adding personal mobility&lt;/h2&gt;
&lt;p&gt;As I said before, those maps are beautiful already. But I wanted to give them a more personal touch. As part of our research, we have been studying how people move in urban areas. Using high precision and anonymized data, we have understood &lt;a href=&#34;https://inequality.media.mit.edu&#34;&gt;how segregation happens&lt;/a&gt; on our streets, neighborhoods, working places. One of the things we found is that even if we happen to be in the same area, we tend to segregate ourselves and visit very different places. &lt;a href=&#34;https://www.youtube.com/watch?v=KJHW9FTURlM&#34;&gt;Even across the street! &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As part of that research, I&amp;rsquo;ve been collecting the locations that I visited in the last years in the Boston area. I used &lt;a href=&#34;https://www.google.com/maps/timeline&#34;&gt;Google Location History&lt;/a&gt; which needs to be activated to work. Once it is activated, it starts saving the places you go to. You can even visualize your movements using the &lt;a href=&#34;https://www.google.com/maps/timeline&#34;&gt;Google Maps Timeline&lt;/a&gt;. Or you can download it using the &lt;a href=&#34;https://takeout.google.com/settings/takeout&#34;&gt;Google Takeout&lt;/a&gt; tool. Of course, if you don&amp;rsquo;t have access to your location history or is deactivated, you can always list the most relevant locations in the area you live and create a table with the right format (see below).&lt;/p&gt;
&lt;p&gt;Once you download your location, you will get two sets of files. The first one is called &lt;code&gt;Location History.json&lt;/code&gt; that contains a lot of location events (including latitute, longitud, timestamp) and a directory called &lt;code&gt;Semantic Location History&lt;/code&gt; that has all the places visited by year and month. Make sure when you download your data from Google Takeout that this semantic history is enabled. We will use the semantic one since it contains a list of places visited (inferred by Google).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(jsonlite)
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(data.table)
path &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./Semantic Location History/&amp;#34;&lt;/span&gt;
files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list.files&lt;/span&gt;(path,pattern&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.json&amp;#34;&lt;/span&gt;,recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;T)
get_locations &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(f){
  data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; jsonlite&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fromJSON&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(path,f))
  tlObj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;timelineObjects&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;placeVisit
  loc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cbind&lt;/span&gt;(tlObj&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;location,tlObj&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;duration)
  tt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(loc&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;startTimestampMs)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
  loc&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.POSIXct&lt;/span&gt;(tt,origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1970-01-01&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;#conver longitude &amp;amp; latitude from E7 to GPS &lt;/span&gt;
  loc&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;lat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;latitudeE7 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e7&lt;/span&gt;
  loc&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;lon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;longitudeE7 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e7&lt;/span&gt;
  loc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.table&lt;/span&gt;(loc)
  loc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; loc[,&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;placeId&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt;)]
  loc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; loc[&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(lon)]
}
locs.df&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rbindlist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(files,get_locations))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The data includes the Google Id for the place, the timestamp of the visit its longitude/latitude position. Of course, I&amp;rsquo;m not showing you my personal data. This table you see below was generated sampling from a bunch of random locations in the Boston area around my working place (MIT Media Lab).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(locs.df) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kbl&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kable_styling&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; placeId &lt;/th&gt;
   &lt;th style=&#34;text-align:left;&#34;&gt; time &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; lat &lt;/th&gt;
   &lt;th style=&#34;text-align:right;&#34;&gt; lon &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ChIJ780101a191a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2020-02-20 16:55:59 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 42.36126 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; -71.08695 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ChIJ140101a191a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2020-03-16 23:42:52 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 42.37321 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; -71.09359 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ChIJ740101a191a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2020-05-31 15:38:12 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 42.37020 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; -71.06178 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ChIJ320101a191a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2020-06-03 21:20:21 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 42.37311 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; -71.12237 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ChIJ420101a191a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2020-02-10 12:15:43 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 42.37220 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; -71.06315 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; ChIJ840101a191a &lt;/td&gt;
   &lt;td style=&#34;text-align:left;&#34;&gt; 2020-05-25 21:53:40 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; 42.38635 &lt;/td&gt;
   &lt;td style=&#34;text-align:right;&#34;&gt; -71.22257 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One way to add this personal information to the map would be to show the location points to the previous map. But for most of us, that would be just a bunch (hundred in my case) of points very close to each other. Since we already have the streets in the map, we will do something different: to plot the routes we took to go from one place to the next one. Two comments about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The semantic locations do not include the routes taken to visit those places. Those can be calculated using the network of streets already downloaded.&lt;/li&gt;
&lt;li&gt;However, most of the days, we will only have one significant place visited. That means we cannot calculate any route that day. What we will do is to assume that each day starts at your home location and ends up in the same place, so at least you have two routes for those days with at least one location in the Google dataset. In my case, I will choose the MIT Media Lab as my home location (I spent a lot of time there last year, but it&amp;rsquo;s definitely not my home üòÑ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We first create a function that return the routes between all the locations within a given day. To get the routes between two locations we used the function &lt;code&gt;osrmRoute&lt;/code&gt; in the &lt;code&gt;osrm&lt;/code&gt; package, which gives the shortest path between two points in the streets&#39; network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(osrm)
daily_routes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(date){
  ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;locs.df&lt;span style=&#34;color:#a6e22e&#34;&gt;[as.Date&lt;/span&gt;(time)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;date,&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lon&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lat&amp;#34;&lt;/span&gt;)]
  &lt;span style=&#34;color:#75715e&#34;&gt;#add home early in the morning&lt;/span&gt;
  ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.table&lt;/span&gt;(lon&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-71.087658&lt;/span&gt;,lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42.36&lt;/span&gt;),ll)
  &lt;span style=&#34;color:#75715e&#34;&gt;#add home late in the day&lt;/span&gt;
  ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(ll,&lt;span style=&#34;color:#a6e22e&#34;&gt;data.table&lt;/span&gt;(lon&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-71.087658&lt;/span&gt;,lat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42.36&lt;/span&gt;))
  route &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(j in &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(ll)){
    p1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(ll&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;lon[j&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;],ll&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;lat[j&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;])
    p2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(ll&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;lon[j],ll&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;lat[j])
    oo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;osrmRoute&lt;/span&gt;(src&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p1,dst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p2,returnclass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sf&amp;#34;&lt;/span&gt;,
                    overview&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;full&amp;#34;&lt;/span&gt;)
    route &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(route,oo)
  }
  route
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that those routes might not be the &lt;em&gt;actual route&lt;/em&gt; taken to go between those points. The &lt;code&gt;osrmRoute&lt;/code&gt; algorithm calculates the shortest path only.&lt;/p&gt;
&lt;p&gt;And then we get all the routes for the whole period (this will take some time)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;dates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(locs.df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time))
routes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do.call&lt;/span&gt;(rbind,
                  &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(dates,daily_routes))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are now ready to plot our geography + streets + personal routes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;final_map &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;counties_MA,
          inherit.aes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          lwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.203&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.234&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.277&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; streets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          inherit.aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;color_roads,
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; highways&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;osm_lines,
          inherit.aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
          color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;color_roads,
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.6&lt;/span&gt;,
          alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.65&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_sf&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;st_geometry&lt;/span&gt;(routes),
          inherit.aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,col&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;,alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;coord_sf&lt;/span&gt;(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[1,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[1,])), 
           ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(bbx[2,]), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(bbx[2,])),
           expand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_void&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(panel.background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
          &lt;span style=&#34;color:#a6e22e&#34;&gt;element_rect&lt;/span&gt;(fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.92&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.679&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.105&lt;/span&gt;)))
final_map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2020-10-19-personal-art-map-with-r_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;h2 id=&#34;printing-them-out&#34;&gt;Printing them out&lt;/h2&gt;
&lt;p&gt;Finally, let&amp;rsquo;s print it out in high resolution. In my case, I used 24 inches by 36 inches, but you can choose other sizes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggsave&lt;/span&gt;(final_map, 
       filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_personal_map_art.png&amp;#34;&lt;/span&gt;,
       scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, 
       width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, 
       height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, 
       units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;,
       dpi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the &lt;code&gt;dpi = 500&lt;/code&gt;, which forces to save the image with high resolution (500 dots per inch). This is especially important if you want to print your poster in large dimensions. The file generated is large (around 40Mb).&lt;/p&gt;
&lt;p&gt;The last step is to send to print or frame. You can use many services online to do that, but you need one that allows you to send such a big file. In my case, I ended up using the Mounted Canvas Print - 36&amp;quot; x 24&amp;quot; at &lt;a href=&#34;http://estebanmoro.org/www.vistaprint.com&#34;&gt;vistaprint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And here is the final result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/final_map_art.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I hope you enjoyed my small project to produce personal map art with R.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up your blog with RStudio and blogdown II: Workflow</title>
      <link>http://estebanmoro.org/post/2019-02-01-setting-up-your-blog-with-rstudio-and-blogdown/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2019-02-01-setting-up-your-blog-with-rstudio-and-blogdown/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is Part III of my series of posts about how to setup you blog with RStudio and blogdown. The other parts are:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://estebanmoro.org/post/2019-02-02-setting-up-your-blog-with-rstudio-and-blogdown-i-creating-the-blog/&#34;&gt;Part I&lt;/a&gt; about to setup the blog using Hugo, RStudio and blogdown&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part II explains my workflow of creating new posts.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://estebanmoro.org/post/2019-02-04-setting-up-your-blog-with-rstudio-and-blogdown-iii-modify-your-theme/&#34;&gt;Part III&lt;/a&gt; on how to modify the theme.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;http://estebanmoro.org/post/2019-02-02-setting-up-your-blog-with-rstudio-and-blogdown-i-creating-the-blog/&#34;&gt;Part I&lt;/a&gt; of this series of post we setup our new blog using blogdown and Hugo. Once the blog is configured, this is the typical workflow I follow to write new posts and update my blog online:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Open your blog project with RStudio&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Load the blogdown library&lt;/em&gt; and start the Hugo server and browser&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(blogdown)
blogdown&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serve_site&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;em&gt;Create new post&lt;/em&gt;: the best way is to use the RStudio Addins ‚Üí New post. The Addins menu is in the top bar of RStudio, but you can also get it using&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;blogdown&lt;span style=&#34;color:#f92672&#34;&gt;:::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new_post_addin&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you will get a window like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/new_post_blogdown.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fill in all the details. Don&amp;rsquo;t forget to choose plain markdown or R markdown. Use the latter if you want to include some R code.&lt;/p&gt;
&lt;p&gt;A new markdown will open with the YAML header filled with the title, author, date, etc. of the posts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/new_post_yaml.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Take some time here to change/add categories and tags to your blog. You can also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a featured image which will appear at the top of the post in some themes (like the casper-two that I chose)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;image: /img/posts/image_for_this_post.png&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since you will take some time to write your new post (even some days), I suggest to include also the variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;draft: true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in the YAML. If you do this, the post will show up in the Rstudio/Hugo local developing environment. But it will not be rendered when we build the deploy version of the blog. Once you have finished writint it change it to &lt;code&gt;draft: false&lt;/code&gt; so next time we build the deployment version of the blog the post will be included.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;After that start writing your amazing post. Everytime you save a new version of the R/markdown file, the Hugo server will render the new version of the blog and you will get in the console something like this&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/server_built.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Editing a R/markdown is super easy. You can find some really good guides to do that here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-1.html&#34;&gt;Introduction to R Markdown&lt;/a&gt; from Rstudio.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdownguide.org/getting-started&#34;&gt;Mardown Guide&lt;/a&gt; by Matt Cone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Underneath Hugo is taking care of converting everything into HTML. This means that you can also use &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;Hugo shortcodes&lt;/a&gt; in the markdown to do things like inserting a tweet or a youtube video. Shortcodes are simple shortcuts to render HTML, iframes, etc. in those cases. Shortcodes appear in your R/markdown like this in markdown&lt;/p&gt;
&lt;p&gt;{{&amp;lt; myshortcode &amp;gt;}}&lt;/p&gt;
&lt;p&gt;of like this in R markdown&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{{ % ... %}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example, if we want to include this youtube video &lt;a href=&#34;https://www.youtube.com/watch?v=2WTWx0yknQQ&#34;&gt;https://www.youtube.com/watch?v=2WTWx0yknQQ&lt;/a&gt; in your R/markdown, you simply have to include the following code in your text:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/2WTWx0yknQQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or to include this tweet &lt;a href=&#34;https://twitter.com/xieyihui/status/817461069014859780&#34;&gt;https://twitter.com/xieyihui/status/817461069014859780&lt;/a&gt; simply use this code&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The bookdown book package just arrived at my door. Love the Alegreya &amp;amp; Source Code Pro fonts on paper. Also happy that the book is so thin! &lt;a href=&#34;https://t.co/kr21J19Cw1&#34;&gt;pic.twitter.com/kr21J19Cw1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yihui Xie (@xieyihui) &lt;a href=&#34;https://twitter.com/xieyihui/status/817461069014859780?ref_src=twsrc%5Etfw&#34;&gt;January 6, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Check the complete list of already available shortcodes &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;here&lt;/a&gt;. You can even write your own ones as we will see later in Part III of this tutorial.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;If you are happy with your post, remove the &lt;code&gt;draft: true&lt;/code&gt; line in the YAML and we are ready to deploy the new version of your blog to our domain. Here is the commands in RStudio I use to do that:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rm -r ~/best_blog_ever/public/*&amp;#34;&lt;/span&gt;)
blogdown&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hugo_build&lt;/span&gt;(local&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;F)
&lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/best_blog_ever/deploy.sh&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The fist command simply erases the &lt;code&gt;public&lt;/code&gt; directory that contained the old version of the blog. This is probably not needed, but it gives me peace of mind :).&lt;/p&gt;
&lt;p&gt;The second command builds the blog. Note the &lt;code&gt;local=F&lt;/code&gt; flag which tells Hugo to build a deployment version of the blog, meaning that all the posts with &lt;code&gt;draft: true&lt;/code&gt; will not be rendered.&lt;/p&gt;
&lt;p&gt;The third command is my personal deployment script. Although most of the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/deployment.html&#34;&gt;guides out there&lt;/a&gt; show you how to deploy your blog using &lt;a href=&#34;https://www.netlify.com&#34;&gt;Netlify&lt;/a&gt; and/or GitHub, I am using my own domain and space at Dreamhost. Then to update my blog I simply synchronize (using &lt;code&gt;rsync&lt;/code&gt;) the &lt;code&gt;public&lt;/code&gt; directory with the root directory of my domain. Here is my &lt;code&gt;deploy.sh&lt;/code&gt; script&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh 
USER=your_user_to_your_blog_domain
HOST=your_dream_host_machine.dreamhost.com
DIR=your_blog_domain/
rsync -avz --exclude-from &#39;exclude-list.txt&#39; --delete public/ ${USER}@${HOST}:~/${DIR}
exit 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you might also notice that I have excluded some files in the synchronization which are specified in the file &lt;code&gt;exclude-list.txt&lt;/code&gt;. In my case I only have the &lt;code&gt;.htacces&lt;/code&gt; file there.&lt;/p&gt;
&lt;p&gt;All done!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up your blog with RStudio and blogdown III: modify your theme</title>
      <link>http://estebanmoro.org/post/2019-02-04-setting-up-your-blog-with-rstudio-and-blogdown-iii-modify-your-theme/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2019-02-04-setting-up-your-blog-with-rstudio-and-blogdown-iii-modify-your-theme/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is Part III of my series of posts about how to setup you blog with RStudio and blogdown. The other parts are:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://estebanmoro.org/post/2019-02-02-setting-up-your-blog-with-rstudio-and-blogdown-i-creating-the-blog/&#34;&gt;Part I&lt;/a&gt; about to setup the blog using Hugo, RStudio and blogdown&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://estebanmoro.org/post/2019-02-01-setting-up-your-blog-with-rstudio-and-blogdown/&#34;&gt;Part II&lt;/a&gt; explains my workflow of creating new posts.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part III (this one) how to modify the theme.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post I am going to show how I modified the original theme &lt;code&gt;casper-two&lt;/code&gt; that I use for my blog. It is a great theme, but for sure you would like to change the menus, the appearance, the structure of the information in the blog, etc.&lt;/p&gt;
&lt;p&gt;Content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hugo-internals&#34;&gt;Hugo internals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-the-main-menu&#34;&gt;Changing the main menu&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#google-analytics&#34;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math-equations&#34;&gt;Math equations&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#custom-css&#34;&gt;Custom CSS&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#altmetrics&#34;&gt;Altmetrics&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#show-only-some-posts-in-the-main-page&#34;&gt;Show only some posts in the main page&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fixing-youtube&#34;&gt;Fixing Youtube&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo-internals&#34;&gt;Hugo internals&lt;/h2&gt;
&lt;p&gt;But before that we have to learn a little bit about how Hugo and our theme works underneath our blog. If you have a look the folder where your blog is, you will find this structure&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/folder-structure.png&#34; alt=&#34;&#34;&gt;{width=80%}&lt;/p&gt;
&lt;p&gt;The last directory (&lt;code&gt;hugo-casper-two&lt;/code&gt;) contains the theme files and has this structure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/theme-folder.png&#34; alt=&#34;&#34;&gt;{width=80%}&lt;/p&gt;
&lt;p&gt;The folder &lt;code&gt;layouts&lt;/code&gt; contains a lot of html files in HUGO format that specify how our pages are going to be rendered. Each file is a mixture of html and HUGO variables. For example, this is how the &lt;code&gt;index.html&lt;/code&gt; looks like&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ partial &amp;quot;head&amp;quot; . }}

&amp;lt;body class=&amp;quot;home-template&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;site-wrapper&amp;quot;&amp;gt;

{{ partial &amp;quot;header&amp;quot; . }}

&amp;lt;main id=&amp;quot;site-main&amp;quot; class=&amp;quot;site-main outer&amp;quot; role=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;post-feed&amp;quot;&amp;gt;
      {{ partial &amp;quot;post-list-main&amp;quot; . }}
    &amp;lt;/div&amp;gt;

    &amp;lt;nav class=&amp;quot;pagination&amp;quot; role=&amp;quot;navigation&amp;quot;&amp;gt;
      {{if .Paginator.HasPrev}}
          &amp;lt;a class=&amp;quot;newer-posts&amp;quot; href=&amp;quot;{{ .Paginator.Prev.URL }}&amp;quot;&amp;gt;&amp;amp;larr; 
               &amp;lt;span class=&amp;quot;hide&amp;quot;&amp;gt;Next Posts&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
      {{end}}
      &amp;lt;span class=&amp;quot;page-number&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hide&amp;quot;&amp;gt;Page {{ .Paginator.PageNumber }} 
            of {{.Paginator.TotalPages}}&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;
      {{if .Paginator.HasNext}}
          &amp;lt;a class=&amp;quot;older-posts&amp;quot; href=&amp;quot;{{ .Paginator.Next.URL }}&amp;quot;&amp;gt;
          &amp;lt;span class=&amp;quot;hide&amp;quot;&amp;gt;Previous Posts&amp;lt;/span&amp;gt; &amp;amp;rarr;&amp;lt;/a&amp;gt;
      {{end}}
    &amp;lt;/nav&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/main&amp;gt;

{{ partial &amp;quot;footer&amp;quot; . }}
&amp;lt;/div&amp;gt;{{ partial &amp;quot;js&amp;quot; . }}&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each &lt;code&gt;{{ }}&lt;/code&gt; command tells Hugo to do something. In particular the first one (&lt;code&gt;{{ partial &amp;quot;head&amp;quot; . }}&lt;/code&gt;) includes in that position the partial &lt;code&gt;head.html&lt;/code&gt; which is also in the layouts folder. Then it comes some HTML, another partial &lt;code&gt;header.html&lt;/code&gt;, etc. You can also put controls/functions for the final code (see for example the &lt;em&gt;if&lt;/em&gt; control &lt;code&gt;{{if .Paginator.HasPrev}}&lt;/code&gt;) or output some variables in the code depending on the context (&lt;code&gt;{{ .Paginator.Prev.URL }}&lt;/code&gt;), etc. Variables and parameters are preceded by a dot. For example .Site.BaseURL` is the base URL for the site.&lt;/p&gt;
&lt;p&gt;Have a look at how Hugo manages the content in the templates in the &lt;a href=&#34;https://gohugo.io/content-management/&#34;&gt;Hugo webpage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Modifying the template requires to changing the files for the different layouts. But instead of modifying the original template files in the &lt;code&gt;themes&lt;/code&gt; folder, it is better to &lt;a href=&#34;https://bookdown.org/yihui/blogdown/custom-layouts.html&#34;&gt;follow the advise here&lt;/a&gt; and replicate the layouts structure outside the &lt;code&gt;themes&lt;/code&gt; folder. Hugo will read first our own &lt;code&gt;layout&lt;/code&gt; folder and then the &lt;code&gt;layout&lt;/code&gt; folder in the original theme. For example, in this post we are going to modify &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;js.html&lt;/code&gt;, etc. And create new layouts &lt;code&gt;post-list-main.html&lt;/code&gt; or shortcodes like &lt;code&gt;yt.html&lt;/code&gt;. So your final blog folder will look like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/folder_layouts.png&#34; alt=&#34;&#34;&gt;{width=80%}&lt;/p&gt;
&lt;h2 id=&#34;changing-the-main-menu&#34;&gt;Changing the main menu&lt;/h2&gt;
&lt;p&gt;This is really easy. Go to your &lt;code&gt;config.toml&lt;/code&gt; and you will see a number of &lt;code&gt;[[menu.main]]&lt;/code&gt; items in it. Change them to link to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Category pages, showing all the posts in a category. Like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[[menu.main]]
  name = &amp;quot;Publications&amp;quot;
  url = &amp;quot;/categories/publications&amp;quot;
  weight = 150
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Individual pages. A link to a particular page/post in your blog&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[[menu.main]]
  name = &amp;quot;About&amp;quot;
  url = &amp;quot;/about/&amp;quot;
  weight = 94
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;External pages. A link to a external page not in your blog&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[[menu.main]]
  name = &amp;quot;My University&amp;quot;
  url = &amp;quot;http://www.uc3m.es&amp;quot;
  weight = 32
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;weight&lt;/code&gt; controls the order in which they appear. Higher weights mean they will appear in the leftmost positions.&lt;/p&gt;
&lt;h2 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h2&gt;
&lt;p&gt;If you want to use Google Analytics for your blog, you can do it by specifying your Google Analytics tracking id in the &lt;code&gt;config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;googleAnalytics = &amp;quot;UA-XXXXYYZZY-X&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It works great, but there is something that I didn&amp;rsquo;t like: the tracking works even in your production environment when you are running the &lt;code&gt;blogdown::serve_site()&lt;/code&gt;. This means that when you are writing a post, updating locally your pictures, etc., and you navigate your blog in Rstudio, it will count as visits to your blog in Google Analytics.&lt;/p&gt;
&lt;p&gt;We are going to modify the theme so that only visits from others are counted in Google Analytics. To do that we are going to copy the file &lt;code&gt;js.html&lt;/code&gt; to our local &lt;code&gt;layouts&lt;/code&gt; folder. If you edit it you will see that the Google Analytics script is the following part:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ with .Site.Params.googleAnalytics }}
  {{ &amp;quot;&amp;lt;!-- Google Analytics --&amp;gt;&amp;quot; | safeHTML }}
  &amp;lt;script&amp;gt;
    var _gaq=[[&#39;_setAccount&#39;,&#39;{{ . }}&#39;],[&#39;_trackPageview&#39;]];
    (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
    g.src=(&#39;https:&#39;==location.protocol?&#39;//ssl&#39;:&#39;//www&#39;)+&#39;.google-analytics.com/ga.js&#39;;
    s.parentNode.insertBefore(g,s)}(document,&#39;script&#39;));
  &amp;lt;/script&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But we are going to tell Hugo to include this script only if the webpage is in the final domain, that is, if we build the final deployment version of our blog. To do that you have to change the above code to&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ $baseurl := printf &amp;quot;%s&amp;quot; .Site.BaseURL }}

{{ if eq $baseurl &amp;quot;http://estebanmoro.org/&amp;quot; }}

{{ with .Site.Params.googleAnalytics }}
  {{ &amp;quot;&amp;lt;!-- Google Analytics --&amp;gt;&amp;quot; | safeHTML }}
  &amp;lt;script&amp;gt;
    var _gaq=[[&#39;_setAccount&#39;,&#39;{{ . }}&#39;],[&#39;_trackPageview&#39;]];
    (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
    g.src=(&#39;https:&#39;==location.protocol?&#39;//ssl&#39;:&#39;//www&#39;)+&#39;.google-analytics.com/ga.js&#39;;
    s.parentNode.insertBefore(g,s)}(document,&#39;script&#39;));
  &amp;lt;/script&amp;gt;
{{ end }}

{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note the &lt;code&gt;if&lt;/code&gt; before the script that tells Hugo to include it only if the base URL for the site coincides with the domain (in this case my domain &lt;code&gt;http://estebanmoro.org)&lt;/code&gt;). I have tried other solutions mentioned &lt;a href=&#34;https://discourse.gohugo.io/t/how-to-exclude-google-analytics-when-running-under-hugo-local-server/6092&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://simpleit.rocks/golang/hugo/avoid-loading-portions-of-code-locally-in-hugo/&#34;&gt;here&lt;/a&gt;, but this is the only that worked for me.&lt;/p&gt;
&lt;h2 id=&#34;math-equations&#34;&gt;Math equations&lt;/h2&gt;
&lt;p&gt;One of the best thing (at least for me) of R markdown is the ability to type directly into &lt;code&gt;\(\LaTeX\)&lt;/code&gt;. This way I can type&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$\int_0^\infty f(x) dx$ &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and it will be rendered as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\(\int_0^\infty f(x) dx\)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;casper-two&lt;/code&gt; theme does not come with the MathJax javascript library which displays mathematical equations in the browser. To include it we have to add the javascript somewhere in the head of all pages. Let&amp;rsquo;s do it using the &lt;code&gt;js.html&lt;/code&gt;. Once again, edit the file in your &lt;code&gt;layouts&lt;/code&gt; folder and add the following line at the top:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;
src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;altmetrics&#34;&gt;Altmetrics&lt;/h2&gt;
&lt;p&gt;For those of us that work in academia, we use the number of citations or alternative ways to measure the impact of a paper. One of them is &lt;a href=&#34;https://www.altmetric.com&#34;&gt;Altmetric&lt;/a&gt; which is particularly useful to track who is talking about your research in social media, newspapers, blogs, etc.&lt;/p&gt;
&lt;p&gt;Here is how the Altmetric page looks for one of my papers:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.altmetric.com/details/24733392&#34;&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/altmetric_badge.png&#34; alt=&#34;&#34;&gt;{width=80%}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the top left you can see the Altmetric &lt;strong&gt;bagde&lt;/strong&gt; for your paper, which is a sum of the mention in news outlets, blogs, Twitter users, etc.&lt;/p&gt;
&lt;p&gt;Altmetric provides free javascript to embed that badge in your webpage (in a lab or personal homepage), so I decided to use it in each of my papers. Here are the instructions from the &lt;a href=&#34;http://api.altmetric.com/embeds.html&#34;&gt;Altmetric page&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, we have to include the Altmetric javascript in our pages. Edit the &lt;code&gt;js.html&lt;/code&gt; again to include:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script id=&amp;quot;altmetric-embed-js&amp;quot; type=&amp;quot;text/javascript&amp;quot;
src=&#39;https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that I have included the &lt;code&gt;id=&amp;quot;altmetric-embed-js&amp;quot;&lt;/code&gt; part to the script. The instructions at Altmetrics do not mention the &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get the DOI for your article. The DOI is a universal identification number for each paper. Most likely you can get it from the journal publication page. For the my paper is &lt;code&gt;10.1371/journal.pone.0195750&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to include your badge in your R/markdown:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div class=&#39;altmetric-embed&#39; data-badge-type=&#39;donut&#39;
data-badge-popover=&amp;quot;right&amp;quot;
data-doi=&amp;quot;10.1371/journal.pone.0195750&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If everything worked you will see something like this:&lt;/p&gt;
&lt;center&gt;&lt;div class=&#39;altmetric-embed&#39; data-badge-type=&#39;large-donut&#39; data-badge-popover=&#34;right&#34;  data-doi=&#34;10.1371/journal.pone.0195750&#34;&gt;&lt;/div&gt;&lt;/center&gt;
&lt;p&gt;You can modify and build your own badge. Check &lt;a href=&#34;http://api.altmetric.com/embeds.html&#34;&gt;all the options here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;custom-css&#34;&gt;Custom CSS&lt;/h2&gt;
&lt;p&gt;You can also modify the style of your webpage through CSS. Although the CSS file of &lt;code&gt;casper-two&lt;/code&gt; theme is buried in the theme folder, there is a possibility to override some of the styles by using a custom CSS. To do that you have to edit the &lt;code&gt;customCSS = [&amp;quot;&amp;quot;]&lt;/code&gt; in your &lt;code&gt;config.toml&lt;/code&gt;. In my case I added a file &lt;code&gt;overrides.css&lt;/code&gt; to the &lt;code&gt;static/css&lt;/code&gt; folder and change the &lt;code&gt;config.toml&lt;/code&gt; file to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;customCSS = [&amp;quot;css/overrides.css&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here are the contents of my &lt;code&gt;overrides.css&lt;/code&gt; in case you want to use it. It basically changes the title font size and weight:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.site-title {
    font-weight: 200;
    font-size: 7rem;
}
.site-header:before {
    background: rgba(0, 0, 0, 0.5);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;show-only-some-posts-in-the-main-page&#34;&gt;Show only some posts in the main page&lt;/h2&gt;
&lt;p&gt;On the things that I missed in my new blog is the ability to show in the main page only the posts that I want. For example, I have a &lt;a href=&#34;http://estebanmoro.org/post/list-of-publications/&#34;&gt;list of publications&lt;/a&gt; that I update regularly but I don&amp;rsquo;t want it to show in the main page. Or you could have a tutorial and you only want it to show up in a specific part of your blog.&lt;/p&gt;
&lt;p&gt;To do that we are going to add a new parameter (by post) &lt;code&gt;hidden&lt;/code&gt; that tells Hugo to show the post in the main page (&lt;code&gt;hidden: false&lt;/code&gt;) or not (&lt;code&gt;hidden: true&lt;/code&gt;). Edit your post and include it in the post YAML as it is done here:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
title: List of Publications
author: Esteban Moro
date: &#39;2019-01-31&#39;
slug: list-of-publications
hidden: true
categories:
  - Publications
image: &amp;quot;img/Publications.jpg&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next thing is to modify the layouts of your theme so that when your blog is rendered by Hugo it does not show posts with &lt;code&gt;hidden: true&lt;/code&gt; in your main page.&lt;/p&gt;
&lt;p&gt;The way I did it is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy the &lt;code&gt;post-list.hml&lt;/code&gt; partial in the &lt;code&gt;layout/partials&lt;/code&gt; folder of the theme to your own &lt;code&gt;layout/partials&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rename the &lt;code&gt;post-list.html&lt;/code&gt; to &lt;code&gt;post-list-main.html&lt;/code&gt;. The reason for this is that we are going to change the latter by we want the theme to use the former when necessary.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;post-list-main.html&lt;/code&gt; it looks like this&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ $paginator := .Paginate (where .Data.Pages.ByDate.Reverse &amp;quot;Type&amp;quot; &amp;quot;post&amp;quot;) }}
{{ range $paginator.Pages }}
{{ if not .Params.hidden }}

&amp;lt;article class=&amp;quot;post-card post&amp;quot;&amp;gt; 
    {{if .Params.image}}
    &amp;lt;a class=&amp;quot;post-card-image-link&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;post-card-image&amp;quot; style=&amp;quot;background-image: url({{.Params.image | absURL}})&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/a&amp;gt;
    {{else}}
    &amp;lt;a class=&amp;quot;post-card-image-link&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;post-card-image&amp;quot; style=&amp;quot;background-image: url({{$.Site.BaseURL}}defimg/{{ index (seq 7 | shuffle) 0 }}.jpg)&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/a&amp;gt;    
    {{end}}

    &amp;lt;div class=&amp;quot;post-card-content&amp;quot;&amp;gt;
      &amp;lt;a class=&amp;quot;post-card-content-link&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
          &amp;lt;header class=&amp;quot;post-card-header&amp;quot;&amp;gt;
              {{if .Params.tags }}&amp;lt;span class=&amp;quot;post-card-tags&amp;quot;&amp;gt;{{ range $index, $tag := .Params.tags }}
              #{{$tag}} {{end}} &amp;lt;/span&amp;gt;
              {{ end }}
              &amp;lt;h2 class=&amp;quot;post-card-title&amp;quot;&amp;gt;{{.Title}}&amp;lt;/h2&amp;gt;
          &amp;lt;/header&amp;gt;
          &amp;lt;section class=&amp;quot;post-card-excerpt&amp;quot;&amp;gt;
              {{ if .Description }} 
                &amp;lt;p&amp;gt;{{ .Description | markdownify }}&amp;lt;/p&amp;gt;
              {{else}}
                &amp;lt;p&amp;gt;{{ .Summary | plainify | safeHTML }}{{ if .Truncated }} ... {{end}} &amp;lt;/p&amp;gt;
              {{end}}
          &amp;lt;/section&amp;gt;
      &amp;lt;/a&amp;gt;

      &amp;lt;footer class=&amp;quot;post-card-meta&amp;quot;&amp;gt;
          &amp;lt;img class=&amp;quot;author-profile-image&amp;quot; src=&amp;quot;{{ (.Params.authorAvatar | default .Site.Params.authorAvatar) | absURL}}&amp;quot; alt=&amp;quot;Author&amp;quot; /&amp;gt;
          &amp;lt;span class=&amp;quot;post-card-author&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;{{.Params.author | default .Site.Params.author}}&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/footer&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/article&amp;gt;
{{ end }}

{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note the &lt;code&gt;if&lt;/code&gt; in the third line that only renders each of the posts if &lt;code&gt;.Params.hidden&lt;/code&gt; is not true.&lt;/p&gt;
&lt;p&gt;Finally we have to modify &lt;code&gt;index.html&lt;/code&gt; (once again copy it to your local &lt;code&gt;layouts&lt;/code&gt; folder) to tell Hugo to use the new &lt;code&gt;post-list-main.html&lt;/code&gt; instead of the old &lt;code&gt;post-list.html&lt;/code&gt;. If you edit &lt;code&gt;index.html&lt;/code&gt; change these lines:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;post-feed&amp;quot;&amp;gt;
      {{ partial &amp;quot;post-list&amp;quot; . }}
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to this one:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &amp;lt;div class=&amp;quot;post-feed&amp;quot;&amp;gt;
      {{ partial &amp;quot;post-list-main&amp;quot; . }}
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And you are done. All posts with &lt;code&gt;hidden: true&lt;/code&gt; in their YAML will not be shown in the main page. But they will appear in the categories, recommended posts, etc. If you don&amp;rsquo;t want them to show in those pages, edit the partials for each of them to include the &lt;code&gt;{{ if not .Params.hidden }}&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;fixing-youtube&#34;&gt;Fixing Youtube&lt;/h2&gt;
&lt;p&gt;Hugo has a &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;number of shortcodes&lt;/a&gt; to embed tweets, videos, gist, etc. For example to embed a youtube video at &lt;code&gt;https://www.youtube.com/watch?v=w7Ft2ymGmfc&lt;/code&gt; you simply have to put this in your R/markdown:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, this does not work with the &lt;code&gt;casper-two&lt;/code&gt; theme, an issue that &lt;a href=&#34;https://github.com/eueung/hugo-casper-two/issues/5&#34;&gt;has been reported&lt;/a&gt; in the theme homepage, but has not been fixed yet.&lt;/p&gt;
&lt;p&gt;To fix it, you can use the solution proposed by &lt;a href=&#34;https://github.com/softinio&#34;&gt;Softinio&lt;/a&gt; in the opened issue page. It is very simple but requires to create a Hugo shortcode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new file named &lt;code&gt;yt.hml&lt;/code&gt; in your &lt;code&gt;layouts/shortcodes&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Put the following code in that file:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;https://www.youtube.com/embed/{{ index .Params 0 }}?start={{ index .Params 1 }}&amp;quot;
style=&amp;quot;position: absolute; top: 0; left: 0; width: 560; height: 315;&amp;quot;
allowfullscreen frameborder=&amp;quot;0&amp;quot; title=&amp;quot;YouTube Video&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;You can now use the new shortcode in your R/markdown like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/w7Ft2ymGmfc?start=&#34;
  style=&#34;position: absolute; top: 0; left: 0; width: 560; height: 315;&#34; allowfullscreen frameborder=&#34;0&#34; title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it. It&amp;rsquo;s a long post (sorry), but I hope you might find it useful. Let me know if there is a better way to do these modifications! üöÄ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up our blog with RStudio and blogdown I: Creating the blog</title>
      <link>http://estebanmoro.org/post/2019-02-02-setting-up-your-blog-with-rstudio-and-blogdown-i-creating-the-blog/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2019-02-02-setting-up-your-blog-with-rstudio-and-blogdown-i-creating-the-blog/</guid>
      <description>&lt;p&gt;Last month I migrated my blog from Wordpress to Hugo and &lt;code&gt;blogdown&lt;/code&gt;. Now I can post from RStudio using R/markdown, which allow me to create interactive posts including R code. It has been such a good experience that I decide to write down how to do it with three posts to help others.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This one about to setup the blog.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://estebanmoro.org/post/2019-02-01-setting-up-your-blog-with-rstudio-and-blogdown/&#34;&gt;Part II&lt;/a&gt; explains my workflow of creating new posts.&lt;/li&gt;
&lt;li&gt;and &lt;a href=&#34;http://estebanmoro.org/post/2019-02-04-setting-up-your-blog-with-rstudio-and-blogdown-iii-modify-your-theme/&#34;&gt;Part III&lt;/a&gt; on how to modify the theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But before starting, a disclaimer: I am not a programer, designer or web developer. Just a normal user of Rstudio and blogdown. This is not a technical guide, just some notes about how I set up my blog to help other people like me. So maybe there is a simpler, cleaner and more standard way to do it. If so, comments are welcome!&lt;/p&gt;
&lt;p&gt;First let&amp;rsquo;s take a look at the different tools that we are going to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;: is a open-source framework for creating static websites. No need for a database to store our posts again (Wordpress) or to use website builders (Squarespace). The good thing about a static website is that it is much faster than other solutions. Pages are clean and download fast, which is the main reason I migrated from the bloated-pages Wordpress experience. Hugo will be the engine behind the creation of our blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;Blogdown&lt;/a&gt;: is a R package to create websites using R/markdown as our language and Hugo as our engine to render our posts into html. As you will see blogdown takes care of the Hugo part, so no need to install anything else to start your new blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com&#34;&gt;R Markdown&lt;/a&gt; We will write posts using R/markdown. If you are not familiar with this format, have a look into it. Basically a R/markdown file is a plain text file in which you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A YAML header at the beginning (with author, date, title, parameters, etc.) surrounded by &lt;code&gt;---&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After that you can start typing our text, formating it using simple codes or,&lt;/li&gt;
&lt;li&gt;Introduce R code chunks whose output will be rendered in the final HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;creating-the-blog&#34;&gt;Creating the blog&lt;/h2&gt;
&lt;p&gt;Creating a new blog cannot be easier. Before starting this is what we need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;RStudio and the blogdown package&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blogdown&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;em&gt;Choose a theme&lt;/em&gt;. Yes, you have &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;many themes&lt;/a&gt; in Hugo. And believe me, this &lt;strong&gt;step is crucial&lt;/strong&gt;, because you are going invest some time to organize our posts, the look of the theme, etc. Creating the new blog could be just 5 minutes, but modifying the theme and adapting our content to it can take weeks. So you might want to spend some time figuring out what theme is best for you. In my case, here are some themes that I considered:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/academic/&#34;&gt;Academic&lt;/a&gt;: If you are in academia this is probably the best theme for you. It is well documented, contains some extensions and a lot of people are using it, so there is a whole community behind it. But it takes a lot of work to adapt the content to it, specially if you have a lot of papers, talks, posts, etc. or you are coming from another platform like Wordpress. This is why I didn&amp;rsquo;t chose it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-tranquilpeak-theme/&#34;&gt;Tranquilpeak&lt;/a&gt;: This is a great simple theme. It is easy customizable. This is a good option if you have a list of posts and what to set up a beautiful and simple blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-casper-two/&#34;&gt;Casper Two&lt;/a&gt;: Casper Two is a personal blogging theme. It is beautiful and simple and it was by choice, since it looked similar to my previous Wordpress theme (which I did like).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have decide the theme is important to locate its repository. Look for the &lt;code&gt;Homepage&lt;/code&gt; button in the Theme page you like. Here is the one for Casper-two:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/casper-two-homepage.png&#34; alt=&#34;&#34;&gt;{width=80%}&lt;/p&gt;
&lt;p&gt;As you can see in the top left corner of the webpage, the repository for this theme is maintained by &lt;code&gt;eueung&lt;/code&gt; in the folder &lt;code&gt;hugo-casper-two&lt;/code&gt;. So write it down or copy that as &lt;code&gt;eueung/hugo-casper-two&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have chosen the theme, we are ready to go in 3 simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a new project in RStudio: File ‚Üí New Project  ‚Üí New Directory  ‚Üí Website using Blogdown&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/new_blog_project.png&#34; alt=&#34;&#34;&gt;{width=60%}&lt;/p&gt;
&lt;p&gt;In the next window, specify the directory name of the blog, the subdirectory where the blog is going to be place and the theme. Here is what it looks in my case&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/new_blog_ever.png&#34; alt=&#34;&#34;&gt;{width=60%}&lt;/p&gt;
&lt;p&gt;Hit the &lt;code&gt;Create Project&lt;/code&gt; and you are done! You have just created your fist blog.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The fist thing you will see in Rstudio is the &lt;code&gt;config.toml&lt;/code&gt; file containing all the parameters to setup the blog. At this point:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Change you &lt;code&gt;baseurl&lt;/code&gt; to be the final one. In my case is &lt;code&gt;baseurl = &amp;quot;http://estebanmoro.org&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can also change the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;subtitle&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Use your Google analytics code (&lt;code&gt;googleAnalytics = &amp;quot;&amp;quot;&lt;/code&gt;) and your disqus shortname (&lt;code&gt;disqusShortname = &amp;quot;&amp;quot;&lt;/code&gt;) to add analytics and comments to our blog. Here is a &lt;a href=&#34;https://notes.peter-baumgartner.net/tutorial/how-to-install-disqus-on-hugo/&#34;&gt;nice post&lt;/a&gt; by Peter Baumgartner about how to install disqus on Hugo.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Let&amp;rsquo;s build the blog! You can do it one-time using&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;blogdown&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hugo_build&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or interactively using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;blogdown&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serve_site&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the latter case, a server is running underneath so everytime you edit/change a post, put a new image in &lt;code&gt;/img&lt;/code&gt; (see below) or the modify the &lt;code&gt;config.toml&lt;/code&gt;, the site is rebuilt by Hugo. Also the blog appears in the viewer pane. This is the best way if you are creating a new post or modifying the theme.&lt;/p&gt;
&lt;p&gt;If didn&amp;rsquo;t set it before, blogdown has also installed some post examples so you can have an idea of how it looks like.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-blog-directory-structure&#34;&gt;Understanding the blog directory structure&lt;/h2&gt;
&lt;p&gt;Before starting to post to our new blog, let&amp;rsquo;s have a look at the directory structure that has been created. In my case, I created the blog in &lt;code&gt;~/best_blog_ever&lt;/code&gt; which looks like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/folder-structure.png&#34; alt=&#34;&#34;&gt;{width=80%}&lt;/p&gt;
&lt;p&gt;The first file &lt;code&gt;best_blog_ever.Rproj&lt;/code&gt; is the blog project we have just created. All the new posts go into the &lt;code&gt;content/post&lt;/code&gt; folder. You can see there that already we have a number of them. They are in the markdown format (&lt;code&gt;.md&lt;/code&gt;) and there is one in the R markdown format (&lt;code&gt;.Rmd&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You also have a folder named &lt;code&gt;static&lt;/code&gt;. Think of it as the root folder for the new blog. That means that if there is file there named &lt;code&gt;cv.pdf&lt;/code&gt; it can be access as &lt;code&gt;http:/estebanmoro.org/cv.pdf&lt;/code&gt;. The folder &lt;code&gt;img&lt;/code&gt; is the perfect place to put our images/pictures. For example, if there is a file &lt;code&gt;picture_vacations.png&lt;/code&gt; in the &lt;code&gt;img&lt;/code&gt; folder, you can include it in our markdown post using&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;![](/img/picture_vacations.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When Hugo builds the blog, the final html files and structure go into the &lt;code&gt;public&lt;/code&gt; folder. This is the static version of the blog and the one we will deploy to our domain.&lt;/p&gt;
&lt;p&gt;Finally the folder &lt;code&gt;themes&lt;/code&gt; contains all the formating for the new theme. I don&amp;rsquo;t recommend to touch it unless you really know what you are doing. We will see in Part III how to modify the theme.&lt;/p&gt;
&lt;h2 id=&#34;migrating-our-content&#34;&gt;Migrating our content&lt;/h2&gt;
&lt;p&gt;I had a lot of posts in my previous Wordpress blog and didn&amp;rsquo;t want to lose them. Luckily there are &lt;a href=&#34;https://gohugo.io/tools/migrations/&#34;&gt;some tools&lt;/a&gt; to migrate your posts from Wordpress to Hugo. I chose &lt;code&gt;exitwp&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;code&gt;exitwp&lt;/code&gt; by cloning or downloading the zip file of the &lt;a href=&#34;https://github.com/wooni005/exitwp-for-hugo&#34;&gt;repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Export your Wordpress blog using xml. To do this, access the admin of our Wordpress blog (MySite -&amp;gt; Settintg -&amp;gt; Export) and export all. &lt;a href=&#34;https://en.support.wordpress.com/export/&#34;&gt;Here&lt;/a&gt; is a guide that shows you how to do it.&lt;/li&gt;
&lt;li&gt;Put our Wordpress &lt;code&gt;xml&lt;/code&gt; file in the &lt;code&gt;wordpress-xml&lt;/code&gt; folder of our &lt;code&gt;exitwp&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;config.yaml&lt;/code&gt; file to change our setups for the migration. For example, you can change the directory where the migrated posts are going to be created by changing the &lt;code&gt;build_dir&lt;/code&gt; parameter.&lt;/li&gt;
&lt;li&gt;Run it by typing &lt;code&gt;./exitwp.py&lt;/code&gt; in the console from the directory of the unzipped archive.&lt;/li&gt;
&lt;li&gt;If everything went well you will have a new &lt;code&gt;build&lt;/code&gt; directory with all the posts in markdown format. Select the ones you want to keep and move them to the &lt;code&gt;content/post&lt;/code&gt; folder of our blog. Depending on our old blog structure you might also have other files in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deploying-the-blog&#34;&gt;Deploying the blog&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;CAUTION: we are going to overwrite the blog in our actual domain, so before proceeding, make a backup of it or export it as explained before.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we are ready to deploy it to our new domain. Here is the commands in RStudio that I have to do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rm -r ~/best_blog_ever/public/*&amp;#34;&lt;/span&gt;)
blogdown&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hugo_build&lt;/span&gt;(local&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;F)
&lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/best_blog_ever/deploy.sh&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The fist command simply erases the &lt;code&gt;public&lt;/code&gt; directory where the new version of the blog is going to be built. This is probably not needed, but it gives me peace of mind :).&lt;/p&gt;
&lt;p&gt;The second command builds the blog. Note the &lt;code&gt;local=F&lt;/code&gt; flag which tells Hugo to build a deployment version of the blog, meaning that all the posts with &lt;code&gt;draft: true&lt;/code&gt; in the YAML will not be rendered. This will be explained better in &lt;a href=&#34;http://estebanmoro.org/posts/2019-02-01-setting-up-your-blog-with-rstudio-and-blogdown/&#34;&gt;Part II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third command is my personal deployment script. Although most of the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/deployment.html&#34;&gt;guides out there&lt;/a&gt; show you how to deploy your new blog using &lt;a href=&#34;https://www.netlify.com&#34;&gt;Netlify&lt;/a&gt; and/or GitHub, I am using my own domain and space at Dreamhost. Then to update my blog I simply synchronize the &lt;code&gt;public&lt;/code&gt; directory with the root directory of my domain. Here is the &lt;code&gt;deploy.sh&lt;/code&gt; script&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh 
USER=your_user_to_our_blog_domain
HOST=your_dream_host_machine.dreamhost.com
DIR=our_blog_domain/
rsync -avz --exclude-from &#39;exclude-list.txt&#39; --delete public/ ${USER}@${HOST}:~/${DIR}
exit 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change your &lt;code&gt;your_user_to_our_blog_domain&lt;/code&gt; and &lt;code&gt;your_dream_host_machine&lt;/code&gt; to your own dreamhost user and machine. The synchronization is down using &lt;code&gt;rysnc&lt;/code&gt;. You might also notice that I have excluded some files in the synchronization which are specified in the file &lt;code&gt;exclude-list.txt&lt;/code&gt;. In my case I only have the &lt;code&gt;.htacces&lt;/code&gt; file there.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it. If everything went well, you have migrated your blog from Wordpress to blogdown in no time.&lt;/p&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;
&lt;p&gt;Although I love blogdown and how fast is to built and create new content, there is a couple of things that you might consider before using blogdown for our blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No search:&lt;/strong&gt; The content generated is static. That means that you have lost the possibility for the users to search your content. In most Hugo themes there is no &amp;ldquo;search&amp;rdquo; button. There is however &lt;a href=&#34;https://gohugo.io/tools/search/&#34;&gt;a possibility&lt;/a&gt; to implement searching in our blog using search engines like &lt;code&gt;lunr&lt;/code&gt; or &lt;code&gt;angolia&lt;/code&gt;. But my experience is that those are difficult to implement. If searching within your blog is crucial, look for a theme that have &lt;a href=&#34;https://themes.gohugo.io/tags/search/&#34;&gt;search already implemented&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Permalinks structure and slugs:&lt;/strong&gt; you don&amp;rsquo;t want to lose the backlinks to your old blog. Have a look a the permalink structure in your older Wordpress blog. In my case a typical post had this structure:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;http://estebanmoro.org/2016/02/more-people-more-fun-the-scaling-of-events-in-cities/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;so the &lt;code&gt;slug&lt;/code&gt; for that particular post was &lt;code&gt;2016/02/more-people-more-fun-the-scaling-of-events-in-cities/&lt;/code&gt;. Most likely, &lt;code&gt;exitwp&lt;/code&gt; has put our old &lt;code&gt;slug&lt;/code&gt; (the URL valid name for our post) in each of the new markdown post&amp;rsquo;s YAML, so there is no need to change anything. But check it just in case. Specially for those posts in your blog that have a lot of backlinks.&lt;/p&gt;
&lt;p&gt;If you want to keep that format for the permalinks for new posts, modify the &lt;code&gt;[permalinks]&lt;/code&gt; parameter in the &lt;code&gt;config.toml&lt;/code&gt; accordingly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Growing old in Twitter</title>
      <link>http://estebanmoro.org/post/2018-12-14-growing-old-in-twitter/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2018-12-14-growing-old-in-twitter/</guid>
      <description>&lt;script src=&#34;http://estebanmoro.org/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://estebanmoro.org/rmarkdown-libs/wordcloud2/wordcloud.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;http://estebanmoro.org/rmarkdown-libs/wordcloud2/wordcloud2-all.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://estebanmoro.org/rmarkdown-libs/wordcloud2/hover.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://estebanmoro.org/rmarkdown-libs/wordcloud2-binding/wordcloud2.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;I started using Twitter more than 10 years ago (!). I open an account in this social network in 2008 and although I was not using it too much for the first year, I become a frequent user after that. It has helped me to get news, information both for my personal and professional interests. But not only that, Twitter has been also the data source for our research, that helped us to investigate the relationship between human behavior in the social platform and paramount problems in our society as &lt;a href=&#34;http://estebanmoro.org/post/2014-04-09-using-friends-as-sensors&#34;&gt;information propagation&lt;/a&gt;, &lt;a href=&#34;http://estebanmoro.org/post/2014-11-13-social-media-fingerprints-of-unemployment&#34;&gt;unemployment&lt;/a&gt;, &lt;a href=&#34;http://estebanmoro.org/post/2016-03-14-rapid-assessment-of-disaster-damage&#34;&gt;disaster damage&lt;/a&gt;, &lt;a href=&#34;http://estebanmoro.org/post/2014-04-22-comunidades-de-partidarios-en-redes-sociales-estudio-de-las-elecciones-catalanas-de-2010-y-2012&#34;&gt;political opinion&lt;/a&gt;. As we keep on working on those subjects we have also recently extended our research to other problems like health, or &lt;a href=&#34;http://estebanmoro.org/post/2018-04-28-weather-impacts-expressed-sentiment&#34;&gt;climate change&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most of the research in human behavior is constrained either by time or by population covered, so we can‚Äôt have both. Large longitudinal databases, extending tens of years, are relatively small in the number of participants or users, while data from millions of users is usually obtained for a very short period of time (months or years). One of the good things about &lt;em&gt;growing old&lt;/em&gt; in those social networks is that we are starting to see tens of years of data to analyze.&lt;/p&gt;
&lt;p&gt;Here I want to analyze by Twitter activity during those last 10 years. First thing is to download all our account activity, something that is explain in the &lt;a href=&#34;https://help.twitter.com/en/managing-your-account/how-to-download-your-twitter-archive&#34;&gt;How to download and view your Twitter archive&lt;/a&gt; help page at Twitter. Basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect to your &lt;a href=&#34;https://twitter.com/settings/account&#34;&gt;Account Settings&lt;/a&gt; at Twitter.&lt;/li&gt;
&lt;li&gt;On the left sidebar you will see a link to &lt;a href=&#34;https://twitter.com/settings/your_twitter_data&#34;&gt;Your Twitter data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;At this step you will probably have to confirm your password, but on the bottom of the next page you have a link to &lt;em&gt;Request data&lt;/em&gt; of your Twitter account.&lt;/li&gt;
&lt;li&gt;When the data is ready to download you will receive an notification at your email with the a link to download it.&lt;/li&gt;
&lt;li&gt;The data comes as a series of JSON files. The file &lt;code&gt;tweets.js&lt;/code&gt; contains all tweets, retweets and metions, but it comes with a &lt;code&gt;window.YTD.tweet.part0 =&lt;/code&gt; header at the beggining. &lt;a href=&#34;https://kyleconroy.com/your-twitter-data&#34;&gt;Remove it&lt;/a&gt; to make it a readable JSON file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let‚Äôs load the tweets&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(jsonlite)
tweets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; jsonlite&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fromJSON&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tweets.js&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The table contains many fields, including the tweet id (&lt;code&gt;id&lt;/code&gt;), timestamp when it was created &lt;code&gt;created_at&lt;/code&gt;, if it is a reply to a status &lt;code&gt;in_reply_to_status_id&lt;/code&gt; or a user &lt;code&gt;in_reply_to_user_id&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;more-or-less-active&#34;&gt;More or less active?&lt;/h3&gt;
&lt;p&gt;The first thing we can investigate is if my behavior in Twitter has changed in these 10 years. My feeling is that people spend less time in the platform when we get older. One reason is that, compared to 2009, it is really difficult to keep tract of what is happening in the platform. I also have less and less time. But it is true that twitter has changed their app to engage users more with the converstation, so that might counterbalance it.&lt;/p&gt;
&lt;p&gt;To analyze it, let‚Äôs add the formated timestamp to the dataset&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;timestamp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.POSIXct&lt;/span&gt;(tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;created_at,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%a %b %d %H:%M:%S %z %Y&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and plot the number of tweets by month.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(ggplot2)
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(zoo)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(tweets,&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.yearmon&lt;/span&gt;(timestamp))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(binwidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.09&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_yearmon&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of tweets per month&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2018-12-14-growing-old-in-twitter_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;As we can see, the most active years were from 2011 to 2015 (around 100 tweets per month). From then on I am tweeting less, corroborating my feeling that I spent less time in the platform (at least tweeting :) )&lt;/p&gt;
&lt;h3 id=&#34;tweeting-or-retweeting-more&#34;&gt;Tweeting or retweeting more?&lt;/h3&gt;
&lt;p&gt;Have I changed the way I use Twitter? Our research in &lt;a href=&#34;2017-03-07-twitter-session-analytics-profiling-users-short-term-behavioral-changes/&#34;&gt;Twitter sessions&lt;/a&gt; and social networks using mobile phone data shows that because of our limited atention and cognitive capacities people tend to perform simpler tasks with time and age. For example we found that in long sessions in Twitter (two or more hours), users start composing less messages (which require more effort) and use more retweets or mentions (replies) within the session, that require less effort.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see what happened in ten years of data. We classify tweets as &lt;code&gt;composed&lt;/code&gt;, &lt;code&gt;mention&lt;/code&gt; or &lt;code&gt;retweets&lt;/code&gt; using the fields in the dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;class &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal&amp;#34;&lt;/span&gt;
tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;class[&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;in_reply_to_status_id)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mention&amp;#34;&lt;/span&gt;
tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;class[&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.na&lt;/span&gt;(tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;retweeted_status_id)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RT&amp;#34;&lt;/span&gt;
tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;class&lt;span style=&#34;color:#a6e22e&#34;&gt;[grep&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RT @&amp;#34;&lt;/span&gt;,tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;full_text)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RT&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and show the fraction of tweets per month in each class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(ggplot2)
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(zoo)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(tweets,&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;as.yearmon&lt;/span&gt;(timestamp), fill&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;class)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_bar&lt;/span&gt;(position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;,binwidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.09&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_yearmon&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_bw&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ylab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fraction of tweets of each class&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xlab&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2018-12-14-growing-old-in-twitter_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Similar to our research for Twitter sessions, I can see that I compose less original tweets with time: while in 2010 almost 50% of my tweets were composed, now only 20% are original and more than 50% of the tweets in my account are retweets.&lt;/p&gt;
&lt;h3 id=&#34;tweeting-about-what&#34;&gt;Tweeting about what?&lt;/h3&gt;
&lt;p&gt;Finally, let‚Äôs see what I tweeted about. Although we could probably do much elaborated analysis, a simple wordcloud will do here. We clean up the text of the tweets (including mentions and retweets) and produce a wordcloud&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(tm)
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(wordcloud2)
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; tweets&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;full_text
&lt;span style=&#34;color:#75715e&#34;&gt;#cleanup remove mentions and url&lt;/span&gt;
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tolower&lt;/span&gt;(texts)
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\\b+rt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, texts)
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@\\S+&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, texts)
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http\\S+\\s*&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, texts)
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gsub&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[[:punct:]]&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, texts) 
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeWords&lt;/span&gt;(texts, &lt;span style=&#34;color:#a6e22e&#34;&gt;stopwords&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;english&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;#get rid of stopwords in english&lt;/span&gt;
texts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeWords&lt;/span&gt;(texts, &lt;span style=&#34;color:#a6e22e&#34;&gt;stopwords&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spanish&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;#get rid of stopwords in spanish&lt;/span&gt;
corpus.texts.all &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Corpus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;VectorSource&lt;/span&gt;(texts))
dtm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TermDocumentMatrix&lt;/span&gt;(corpus.texts.all)
m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(dtm)
v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rowSums&lt;/span&gt;(m),decreasing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(v),freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v)
&lt;span style=&#34;color:#a6e22e&#34;&gt;wordcloud2&lt;/span&gt;(d[d&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;freq&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,],fontFamily&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loma&amp;#34;&lt;/span&gt;,rotateRatio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;wordcloud2 html-widget html-fill-item-overflow-hidden html-fill-item&#34; id=&#34;htmlwidget-1&#34; style=&#34;width:960px;height:480px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;word&#34;:[&#34;gracias&#34;,&#34;twitter&#34;,&#34;data&#34;,&#34;social&#34;,&#34;thanks&#34;,&#34;new&#34;,&#34;networks&#34;,&#34;via&#34;,&#34;great&#34;,&#34;nice&#34;,&#34;work&#34;,&#34;science&#34;,&#34;network&#34;,&#34;paper&#34;,&#34;madrid&#34;,&#34;hoy&#34;,&#34;redes&#34;,&#34;amp&#34;,&#34;talk&#34;,&#34;datos&#34;,&#34;congrats&#34;,&#34;will&#34;,&#34;big&#34;,&#34;just&#34;,&#34;google&#34;,&#34;bien&#34;,&#34;can&#34;,&#34;good&#34;,&#34;ver&#34;,&#34;uc3m&#34;,&#34;research&#34;,&#34;sociales&#34;,&#34;espa√±a&#34;,&#34;bigdata&#34;,&#34;time&#34;,&#34;facebook&#34;,&#34;now&#34;,&#34;aqu√≠&#34;,&#34;mejor&#34;,&#34;enhorabuena&#34;,&#34;thank&#34;,&#34;tweetsandbeersuc3m&#34;,&#34;using&#34;,&#34;one&#34;,&#34;people&#34;,&#34;ahora&#34;,&#34;like&#34;,&#34;see&#34;,&#34;nuevo&#34;,&#34;complex&#34;,&#34;a√±os&#34;,&#34;spain&#34;,&#34;media&#34;,&#34;interesante&#34;,&#34;analysis&#34;,&#34;tweets&#34;,&#34;use&#34;,&#34;ma√±ana&#34;,&#34;know&#34;,&#34;d√≠a&#34;,&#34;post&#34;,&#34;amazing&#34;,&#34;first&#34;,&#34;c√≥mo&#34;,&#34;rstats&#34;,&#34;trabajo&#34;,&#34;ciencia&#34;,&#34;blog&#34;,&#34;human&#34;,&#34;gente&#34;,&#34;v√≠a&#34;,&#34;creo&#34;,&#34;charla&#34;,&#34;buena&#34;,&#34;a√±o&#34;,&#34;art√≠culo&#34;,&#34;muchas&#34;,&#34;today&#34;,&#34;bueno&#34;,&#34;ser&#34;,&#34;pues&#34;,&#34;day&#34;,&#34;vez&#34;,&#34;next&#34;,&#34;looking&#34;,&#34;interesting&#34;,&#34;cuenta&#34;,&#34;mobile&#34;,&#34;video&#34;,&#34;gran&#34;,&#34;solo&#34;,&#34;puede&#34;,&#34;conference&#34;,&#34;mit&#34;,&#34;dont&#34;,&#34;estudio&#34;,&#34;menos&#34;,&#34;app&#34;,&#34;ipad&#34;,&#34;papers&#34;,&#34;ready&#34;,&#34;buen&#34;,&#34;help&#34;,&#34;hace&#34;,&#34;parece&#34;,&#34;way&#34;,&#34;spanish&#34;,&#34;iic&#34;,&#34;hecho&#34;,&#34;link&#34;,&#34;open&#34;,&#34;tweet&#34;,&#34;project&#34;,&#34;pa√≠s&#34;,&#34;mismo&#34;,&#34;get&#34;,&#34;got&#34;,&#34;study&#34;,&#34;iphone&#34;,&#34;online&#34;,&#34;as√≠&#34;,&#34;hacer&#34;,&#34;world&#34;,&#34;communication&#34;,&#34;temporal&#34;,&#34;web&#34;,&#34;really&#34;,&#34;please&#34;,&#34;an√°lisis&#34;,&#34;check&#34;,&#34;real&#34;,&#34;dynamics&#34;,&#34;friends&#34;,&#34;information&#34;,&#34;investigaci√≥n&#34;,&#34;mundo&#34;,&#34;tiempo&#34;,&#34;challenge&#34;,&#34;working&#34;,&#34;voy&#34;,&#34;dice&#34;,&#34;phone&#34;,&#34;final&#34;,&#34;also&#34;,&#34;cada&#34;,&#34;curso&#34;,&#34;sorry&#34;,&#34;systems&#34;,&#34;last&#34;,&#34;red&#34;,&#34;barcelona&#34;,&#34;suerte&#34;,&#34;yes&#34;,&#34;carlos&#34;,&#34;phd&#34;,&#34;boston&#34;,&#34;universidad&#34;,&#34;best&#34;,&#34;siempre&#34;,&#34;mas&#34;,&#34;year&#34;,&#34;2012&#34;,&#34;dos&#34;,&#34;d√≠as&#34;,&#34;make&#34;,&#34;school&#34;,&#34;talks&#34;,&#34;manuel&#34;,&#34;find&#34;,&#34;vamos&#34;,&#34;habla&#34;,&#34;salamanca&#34;,&#34;eccs11&#34;,&#34;want&#34;,&#34;unemployment&#34;,&#34;primer&#34;,&#34;informaci√≥n&#34;,&#34;behavior&#34;,&#34;available&#34;,&#34;info&#34;,&#34;team&#34;,&#34;idea&#34;,&#34;article&#34;,&#34;map&#34;,&#34;feliz&#34;,&#34;years&#34;,&#34;bad&#34;,&#34;visualization&#34;,&#34;cities&#34;,&#34;right&#34;,&#34;mobility&#34;,&#34;etc&#34;,&#34;databeers&#34;,&#34;review&#34;,&#34;s√≥lo&#34;,&#34;join&#34;,&#34;society&#34;,&#34;veo&#34;,&#34;fin&#34;,&#34;made&#34;,&#34;innovachallenge&#34;,&#34;apple&#34;,&#34;email&#34;,&#34;mac&#34;,&#34;learning&#34;,&#34;around&#34;,&#34;well&#34;,&#34;scientific&#34;,&#34;satellite&#34;,&#34;news&#34;,&#34;verdad&#34;,&#34;problema&#34;,&#34;mira&#34;,&#34;proyecto&#34;,&#34;tomorrow&#34;,&#34;machine&#34;,&#34;free&#34;,&#34;forward&#34;,&#34;problem&#34;,&#34;matem√°ticas&#34;,&#34;book&#34;,&#34;job&#34;,&#34;seg√∫n&#34;,&#34;vaya&#34;,&#34;graph&#34;,&#34;hola&#34;,&#34;internet&#34;,&#34;viral&#34;,&#34;read&#34;,&#34;two&#34;,&#34;espero&#34;,&#34;hablar&#34;,&#34;pena&#34;,&#34;entrevista&#34;,&#34;hablando&#34;,&#34;mucha&#34;,&#34;talking&#34;,&#34;think&#34;,&#34;another&#34;,&#34;deadline&#34;,&#34;future&#34;,&#34;researchers&#34;,&#34;supuesto&#34;,&#34;published&#34;,&#34;ayer&#34;,&#34;funciona&#34;,&#34;cierto&#34;,&#34;come&#34;,&#34;program&#34;,&#34;done&#34;,&#34;htt&#34;,&#34;many&#34;,&#34;group&#34;,&#34;parte&#34;,&#34;vemos&#34;,&#34;better&#34;,&#34;change&#34;,&#34;mention&#34;,&#34;puedes&#34;,&#34;despu√©s&#34;,&#34;ingenier√≠a&#34;,&#34;users&#34;,&#34;netmob15&#34;,&#34;sna&#34;,&#34;need&#34;,&#34;tool&#34;,&#34;ties&#34;,&#34;comunicaci√≥n&#34;,&#34;aunque&#34;,&#34;let&#34;,&#34;predict&#34;,&#34;call&#34;,&#34;innovaci√≥n&#34;,&#34;number&#34;,&#34;hombre&#34;,&#34;digital&#34;,&#34;netsci13&#34;,&#34;try&#34;,&#34;jornada&#34;,&#34;tan&#34;,&#34;may&#34;,&#34;workshop&#34;,&#34;still&#34;,&#34;place&#34;,&#34;siento&#34;,&#34;netmob&#34;,&#34;scientists&#34;,&#34;cosas&#34;,&#34;menci√≥n&#34;,&#34;puedo&#34;,&#34;all√≠&#34;,&#34;speakers&#34;,&#34;casa&#34;,&#34;week&#34;,&#34;quieres&#34;,&#34;days&#34;,&#34;2014&#34;,&#34;2010&#34;,&#34;interested&#34;,&#34;shows&#34;,&#34;impresionante&#34;,&#34;happy&#34;,&#34;mining&#34;,&#34;conocimiento&#34;,&#34;igraph&#34;,&#34;pasado&#34;,&#34;marketing&#34;,&#34;sharing&#34;,&#34;100&#34;,&#34;different&#34;,&#34;seguir&#34;,&#34;nature&#34;,&#34;primera&#34;,&#34;personas&#34;,&#34;hablamos&#34;,&#34;math&#34;,&#34;luis&#34;,&#34;patterns&#34;,&#34;back&#34;,&#34;physics&#34;,&#34;genial&#34;,&#34;podemos&#34;,&#34;top&#34;,&#34;others&#34;,&#34;grande&#34;,&#34;game&#34;,&#34;pablo&#34;,&#34;pol√≠tica&#34;,&#34;viernes&#34;,&#34;visto&#34;,&#34;welcome&#34;,&#34;tarde&#34;,&#34;business&#34;,&#34;scientist&#34;,&#34;datascience&#34;,&#34;elecciones&#34;,&#34;semana&#34;,&#34;felicidades&#34;,&#34;alguien&#34;,&#34;sensors&#34;,&#34;much&#34;,&#34;mal&#34;,&#34;punto&#34;,&#34;followers&#34;,&#34;hope&#34;,&#34;hijo&#34;,&#34;nueva&#34;,&#34;things&#34;,&#34;take&#34;,&#34;part&#34;,&#34;academic&#34;,&#34;foto&#34;,&#34;going&#34;,&#34;instituto&#34;,&#34;2015&#34;,&#34;impact&#34;,&#34;spread&#34;,&#34;wow&#34;,&#34;acabo&#34;,&#34;puesto&#34;,&#34;luego&#34;,&#34;hora&#34;,&#34;stop&#34;,&#34;biblioteca&#34;,&#34;jornadaiic12&#34;,&#34;structure&#34;,&#34;list&#34;,&#34;todav√≠a&#34;,&#34;code&#34;,&#34;per&#34;,&#34;search&#34;,&#34;ever&#34;,&#34;caso&#34;,&#34;ello&#34;,&#34;usuarios&#34;,&#34;global&#34;,&#34;everything&#34;,&#34;gobierno&#34;,&#34;mathematics&#34;,&#34;applied&#34;,&#34;lab&#34;,&#34;netsci&#34;,&#34;recent&#34;,&#34;espa√±oles&#34;,&#34;course&#34;,&#34;crisis&#34;,&#34;android&#34;,&#34;millones&#34;,&#34;visualizaci√≥n&#34;,&#34;point&#34;,&#34;strength&#34;,&#34;start&#34;,&#34;empresa&#34;,&#34;grandes&#34;,&#34;iii&#34;,&#34;found&#34;,&#34;sistema&#34;,&#34;caf√©&#34;,&#34;decir&#34;,&#34;mariluz&#34;,&#34;jos√©&#34;,&#34;python&#34;,&#34;students&#34;,&#34;important&#34;,&#34;results&#34;,&#34;cool&#34;,&#34;influencia&#34;,&#34;university&#34;,&#34;espa√±ol&#34;,&#34;interesa&#34;,&#34;abrazo&#34;,&#34;city&#34;,&#34;statistics&#34;,&#34;speaker&#34;,&#34;falta&#34;,&#34;making&#34;,&#34;model&#34;,&#34;personal&#34;,&#34;sale&#34;,&#34;necesitas&#34;,&#34;alguna&#34;,&#34;award&#34;,&#34;session&#34;,&#34;profesor&#34;,&#34;models&#34;,&#34;thing&#34;,&#34;tener&#34;,&#34;mayor&#34;,&#34;futuro&#34;],&#34;freq&#34;:[583,463,440,396,261,256,232,215,212,206,189,180,179,171,167,163,160,158,155,153,153,146,144,143,132,132,130,121,120,112,111,108,107,103,103,101,99,95,93,93,92,92,91,91,90,90,89,88,87,86,85,85,82,82,81,80,80,80,78,78,77,77,77,74,74,73,73,73,72,72,71,71,70,69,69,68,67,66,66,65,65,64,63,62,62,62,62,60,60,59,59,58,57,57,57,57,57,57,57,56,56,56,55,55,55,54,54,54,54,54,53,52,52,52,52,52,52,51,51,51,51,51,50,50,50,50,49,48,48,48,48,47,47,47,46,46,46,46,45,45,45,44,44,44,44,44,44,43,43,43,43,43,42,42,42,42,42,42,42,42,42,42,42,42,41,41,41,41,41,41,41,41,41,40,40,40,40,40,39,39,39,39,39,39,39,38,38,38,38,38,38,38,37,37,37,36,36,36,36,36,36,36,36,36,35,35,35,35,35,35,35,35,35,35,35,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,33,33,33,33,33,33,33,32,32,32,32,32,32,32,32,32,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,29,29,29,29,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21],&#34;fontFamily&#34;:&#34;Loma&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;color&#34;:&#34;random-dark&#34;,&#34;minSize&#34;:0,&#34;weightFactor&#34;:0.3087478559176672,&#34;backgroundColor&#34;:&#34;white&#34;,&#34;gridSize&#34;:0,&#34;minRotation&#34;:-0.7853981633974483,&#34;maxRotation&#34;:0.7853981633974483,&#34;shuffle&#34;:true,&#34;rotateRatio&#34;:0,&#34;shape&#34;:&#34;circle&#34;,&#34;ellipticity&#34;:0.65,&#34;figBase64&#34;:null,&#34;hover&#34;:null},&#34;evals&#34;:[],&#34;jsHooks&#34;:{&#34;render&#34;:[{&#34;code&#34;:&#34;function(el,x){\n                        console.log(123);\n                        if(!iii){\n                          window.location.reload();\n                          iii = False;\n\n                        }\n  }&#34;,&#34;data&#34;:null}]}}&lt;/script&gt;
&lt;p&gt;As you can see, the word I used more is &lt;em&gt;thanks&lt;/em&gt; (‚Äúgracias‚Äù in spanish), together with other related to my field of research (&lt;em&gt;networks&lt;/em&gt;, &lt;em&gt;data&lt;/em&gt;, &lt;em&gt;social&lt;/em&gt;, etc.).&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So, yes I am growing older in Twitter and the way I use the platform is different. I probably spend more time reading that engaging in new conversations, new tweets or creating hashtags for events or conferences. This exercise proves that not only Twitter is a good platform to understand timely events like elections, sports, natural disasters or unemployment, but also to understand how people change in the course of a lifetime (or at least tens of years) with and outside the platform.&lt;/p&gt;
&lt;p&gt;And as my wordcloud shows, I am thankful for those 10 years of sharing the platform with friends, colleagues and other familiar strangers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Temporal networks with R and igraph (updated)</title>
      <link>http://estebanmoro.org/post/2015-12-21-temporal-networks-with-r-and-igraph-updated/</link>
      <pubDate>Mon, 21 Dec 2015 21:17:18 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2015-12-21-temporal-networks-with-r-and-igraph-updated/</guid>
      <description>&lt;p&gt;A while ago, I wrote &lt;a href=&#34;http://estebanmoro.org/post/2012-11-10-temporal-networks-with-igraph-and-r-with-20-lines-of-code/&#34;&gt;a post&lt;/a&gt; about how to create animations of temporal networks using R and the amazing package &lt;a href=&#34;http://igraph.org&#34;&gt;igraph package&lt;/a&gt;. The post was written in 2012 and the code does not work with the most recent versions (1.0) of &lt;code&gt;igraph&lt;/code&gt;. Here I revisited that post, improving its performance and also making it consistent with the new versions of the package and R.&lt;/p&gt;
&lt;p&gt;First of all, let me remind you the basic idea: we want to get an animated evolution of a network in which nodes/edges appear (and/or disappear) dynamically. We also want a &amp;ldquo;dynamical layout&amp;rdquo; for the temporal network in which the arrangement of the nodes and edges changes accordingly to the dynamics of the temporal network. In this post I will show you how to render the network at each time step and how to encode all snapshots into a video file using the &lt;code&gt;igraph&lt;/code&gt; package in R and &lt;code&gt;ffmpeg&lt;/code&gt;. The idea is very simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generate a number of snapshots of the network at different times using R and &lt;code&gt;igraph&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;then put them together in a video file using the &lt;code&gt;ffmpeg&lt;/code&gt; encoding tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the first part we need to draw the temporal network at each snapshot. Given the set of nodes and edges present at a given time, we have to find a layout for that instantaneous graph and plot the graph using that layout. There are many algorithms in &lt;code&gt;igraph&lt;/code&gt; to do that, mainly, &lt;a href=&#34;http://en.wikipedia.org/wiki/Force-based_algorithms_(graph_drawing)&#34;&gt;force based algorithms&lt;/a&gt;, which try to find the best disposition of nodes and edges for a given graph, typically starting from a random position. The problem is that from one snapshot to the following, the layout could vary significantly, producing a swarm-of-bees kind of motion when we put the snapshots together&lt;/p&gt;
&lt;p&gt;The solution is then to evolve smoothly the layout from one snapshot to the following, by allowing only small changes to accommodate the changes in edges and nodes. To do that we need layout algorithms in which we can specify the initial positions of the nodes and let the algorithm evolve smoothly from that initial position. In &lt;code&gt;igraph&lt;/code&gt;, this can be done for the Graphopt (&lt;code&gt;layout_with_graphopt&lt;/code&gt;), Kamada-Kawai (&lt;code&gt;layout_with_kk&lt;/code&gt;) and Fruchterman-reingold (&lt;code&gt;layout_with_fr&lt;/code&gt;) algorithms using the &lt;code&gt;coords&lt;/code&gt; or &lt;code&gt;start&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(igraph)
&lt;span style=&#34;color:#a6e22e&#34;&gt;par&lt;/span&gt;(mfrow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),mar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), oma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;watts.strogatz.game&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;)
layout.old &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout_with_fr&lt;/span&gt;(g)
&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(i in &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;){
  layout.new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout_with_fr&lt;/span&gt;(g,niter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,coords&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.old,
                              start.temp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,grid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nogrid&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(g,layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.new)
  layout.old &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; layout.new
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2015-12-21-temporal-networks-with-r-and-igraph-updated_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;As you can see the layouts are similar. There are three parameters passed to the layout function: &lt;code&gt;niter = 10&lt;/code&gt; which specifies the number of iterations (10) of energy minimization procedure in the forced based algorithm. This number should be small, otherwise the final result will be very different from the initial condition. The argument &lt;code&gt;start.temp&lt;/code&gt; is the maximum amount of movement allowed along one axis, within one step, for a vertex and it should be kept small for the same reason. Finally, for performance issues, the Fruchterman-reingold algorithm might be implemented in a grid, something we prevent by using the &lt;code&gt;grid=&amp;ldquo;nogrid&amp;rdquo;&lt;/code&gt; setting.&lt;/p&gt;
&lt;p&gt;The second¬†problem is that in a temporal network nodes and/or edges appear and disappear dynamically. Thus the time dependent graph might have different number of nodes and/or edges from one snapshot to the next one. This means that the layout at a given snapshot cannot be used as the initial condition to generate next time layout, since the number of nodes can be different. My approach here is very simple: consider all (past/present/future) nodes/edges and calculate the layout for all of them in each step, but considering only those edges which are present at a given time and displaying only nodes with at least one edge. This trick allows the reutilization of the layouts between steps. Furthermore, it will produce a layout in which present nodes are tightly connected, while past/future nodes are repelled from them.¬†This effect dramatically highlights the appearance and disappearance of nodes, but could create too much confusion if there are many of those events.&lt;/p&gt;
&lt;p&gt;To test this ideas, we will again work an important example in the theory of complex networks: the preferential attachment mechanism to generate scale-free networks, i.e. the &lt;a href=&#34;http://en.wikipedia.org/wiki/BA_model&#34;&gt;Barab√°si-Albert model&lt;/a&gt;. In our implementation, we keep the mechanism very simple: starting from an initial core of nodes, at each time step we add a single node that connects to m existing nodes which are selected proportionally to the number of links that the existing nodes already have. This mechanism leads to heavily linked nodes (‚Äúhubs‚Äù) together with a large fraction of poorly connected nodes. A particular realization of this model can be found in the file &lt;code&gt;edges.csv&lt;/code&gt; below. The structure of the file is simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.table&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/emoro/temporal_networks/master/edges.csv&amp;#34;&lt;/span&gt;,header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;T)
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(ff)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##   id1 id2 time
## 1   1   2    1
## 2   1   3    1
## 3   2   3    1
## 4   5   3    2
## 5   6   2    3
## 6   7   2    4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;each line of the form &lt;code&gt;id1 | id2 | time &lt;/code&gt; indicates that a link between id1 and id2 appears at a particular time. Depending on the context this might represent that the tie was activated at that particular instant (for example if it is a RT between two twitter accounts) or that it was the time in which the edge appeared first (like in our Barab√°si-Albert model).&lt;/p&gt;
&lt;p&gt;Here is the code to generate the snapshots and producing a PNG picture for each of them&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#this version of the script has been tested on igraph 1.0.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#load libraries&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(igraph,RcolorBrewer)

&lt;span style=&#34;color:#75715e&#34;&gt;#load the edges with time stamp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#there are three columns in edges: id1,id2,time&lt;/span&gt;
edges &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.table&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edges.csv&amp;#34;&lt;/span&gt;,header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;T)

&lt;span style=&#34;color:#75715e&#34;&gt;#generate the full graph&lt;/span&gt;
g &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;graph.data.frame&lt;/span&gt;(edges,directed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;F)

&lt;span style=&#34;color:#75715e&#34;&gt;#generate a cool palette for the graph (darker colors = older nodes)&lt;/span&gt;
YlOrBr.pal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colorRampPalette&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;brewer.pal&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YlOrRd&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;#colors for the nodes are chosen from the very beginning&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;YlOrBr.pal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vcount&lt;/span&gt;(g)))&lt;span style=&#34;color:#a6e22e&#34;&gt;[as.numeric&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;name)]

&lt;span style=&#34;color:#75715e&#34;&gt;#time in the edges goes from 1 to 300. We kick off at time 3&lt;/span&gt;
ti &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#remove edges which are not present&lt;/span&gt;
gt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_edges&lt;/span&gt;(g,&lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ti))
&lt;span style=&#34;color:#75715e&#34;&gt;#generate first layout using graphopt with normalized coordinates. This places the initially connected set of nodes in the middle. If you use fruchterman.reingold it will place that initial set in the outer ring.&lt;/span&gt;
layout.old &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;norm_coords&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;layout.graphopt&lt;/span&gt;(gt), xmin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;, xmax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, ymin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;, ymax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;#total time of the dynamics&lt;/span&gt;
total_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time)
&lt;span style=&#34;color:#75715e&#34;&gt;#This is the time interval for the animation. In this case is taken to be 1/10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#of the time (i.e. 10 snapshots) between adding two consecutive nodes&lt;/span&gt;
dt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Output for each frame will be a png with HD size 1600x900 :)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt;(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;animation/example%03d.png&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1600&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#Time loop starts&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(time in &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,total_time,dt)){
  &lt;span style=&#34;color:#75715e&#34;&gt;#remove edges which are not present&lt;/span&gt;
  gt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_edges&lt;/span&gt;(g,&lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; time))
  &lt;span style=&#34;color:#75715e&#34;&gt;#with the new graph, we update the layout a little bit&lt;/span&gt;
  layout.new &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout_with_fr&lt;/span&gt;(gt,coords&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.old,niter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,start.temp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,grid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nogrid&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;#plot the new graph&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(gt,layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.new,
       vertex.label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,vertex.size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1+2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;degree&lt;/span&gt;(gt)),
       vertex.frame.color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color,edge.width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;,
       asp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,margin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-0.15&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;#use the new layout in the next round&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#use the new layout in the next round&lt;/span&gt;
  layout.old &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; layout.new
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;dev.off&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see the edges present before time &lt;code&gt;ti=3&lt;/code&gt; are considered as the initial seed for the animation. The rest of the edges are removed from the graph and the layout is calculated. At each time step in the loop the same procedure is followed: delete all edges with function &lt;code&gt;delete_edges&lt;/code&gt; which are not present at time &lt;code&gt;time&lt;/code&gt;, update the layout a little bit and plot the corresponding graph. Note that the size of the vertices is log-proportional to their &lt;code&gt;degree&lt;/code&gt;, which means that if there is no edge incident to a node, the size of the node is &lt;code&gt;-Inf&lt;/code&gt; and it is not displayed. This way of hiding nodes can be change to be more elegant, but it does the trick here.&lt;/p&gt;
&lt;p&gt;After running the script above you will end up with a number of files named &lt;code&gt;example001.png&lt;/code&gt;, &lt;code&gt;example002.png&lt;/code&gt; and so on. To encode these images into a video format you can use the &lt;a href=&#34;http://ffmpeg.org&#34;&gt;ffmpeg&lt;/a&gt;  tool which can be install in linux, windows or mac. The following command line in a terminal shell produces a video file &lt;code&gt;output.mp4&lt;/code&gt; in the mpeg format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ffmpeg &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i example%&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;d.png &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;v &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;M output.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first &lt;code&gt;-r 10&lt;/code&gt; flag controls the rate of frames per second (fps), 10 in this case, while the &lt;code&gt;-b:v 20M&lt;/code&gt; sets the bitrate in the output (set to a large value here, 20M). The result is the following video&lt;/p&gt;
&lt;iframe class=&#34;vimeo-embed embed-responsive-item&#34; src=&#34;https://player.vimeo.com/video/149633952&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34; webkitallowfullscreen=&#34;&#34; mozallowfullscreen=&#34;&#34; allowfullscreen=&#34;&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;This is it! Done with 17 lines in R and updated to the last version of igraph (1.0). I am eager to know your comments. Please!&lt;/p&gt;
&lt;p&gt;The scripts and data can also be found at &lt;a href=&#34;https://github.com/emoro/temporal_networks&#34;&gt;https://github.com/emoro/temporal_networks&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Temporal networks with igraph and R (with 20 lines of code!)</title>
      <link>http://estebanmoro.org/post/2012-11-10-temporal-networks-with-igraph-and-r-with-20-lines-of-code/</link>
      <pubDate>Sat, 10 Nov 2012 23:55:46 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2012-11-10-temporal-networks-with-igraph-and-r-with-20-lines-of-code/</guid>
      <description>&lt;link href=&#34;http://estebanmoro.org/rmarkdown-libs/vembedr/css/vembedr.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;blockquote&gt;
**UPDATE**: the version of the R code in this post does not work with newer versions of the igraph package (\&gt; 1.0). I have posted an updated version of this post here: [Temporal networks with R and igraph (updated)](/post/2015-12-21-temporal-networks-with-r-and-igraph-updated/). Please visit the new post to use the new code and follow the discussion there.
&lt;/blockquote&gt;
&lt;p&gt;In my &lt;a href=&#34;http://estebanmoro.org/post/2012-10-29-temporal-network-of-information-diffusion-in-twitter/&#34;&gt;last post&lt;/a&gt; about how a twitter conversation unfolds in time on Twitter, the dynamical nature of information diffusion in twitter was illustrated with a video of the temporal network of interactions (RTs) between accounts. The temporal evolution of the network yields to another perspective of social structure and, in some cases, aggregating the data in a time window might blur out important temporal structures on information diffusion, community or opinion formation, etc. Although many of the commercial and free &lt;a href=&#34;http://en.wikipedia.org/wiki/Social_network_analysis_software&#34;&gt;Social Network Analysis software&lt;/a&gt; have tools to visualize static networks, there are no so many options out there for dynamical networks. And in some cases they have very limited options for their ‚Äúdynamical layout‚Äù. A notable exception is &lt;a href=&#34;http://www.stanford.edu/group/sonia/documentation/install.html&#34;&gt;SoNIA&lt;/a&gt;, the Java-based package, which unfortunately is &lt;a href=&#34;http://sourceforge.net/projects/sonia/files/sonia/sonia_1_2_2_unstable/&#34;&gt;not updated frequently&lt;/a&gt;. Another possibility is to work with the &lt;a href=&#34;http://gephi.org/2011/gsoc-mid-term-a-new-timeline/&#34;&gt;Timeline plugin&lt;/a&gt; in Gephi. However there is no video recording possibility for the animations. In this post I will show you how to render the network at each time step and how to encode all snapshots into a video file using the &lt;a href=&#34;http://igraph.sourceforge.net&#34;&gt;igraph package&lt;/a&gt; in R and ffmpeg. The idea is very simple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generate a number of snapshots of the network at different times using R and igraph, and&lt;/li&gt;
&lt;li&gt;then put them together in a video file using ffmpeg.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For 1. we need to draw the temporal network at each snapshot. Given the set of nodes and edges present at a given time, we have to find a layout for that instantaneous graph. The layout is a two-dimensional visualization of the nodes and edges in the plane and there are &lt;a href=&#34;http://en.wikipedia.org/wiki/Graph_drawing&#34;&gt;many algorithms&lt;/a&gt; to produce it. The package igraph contains mainly &lt;a href=&#34;http://en.wikipedia.org/wiki/Force-based_algorithms_(graph_drawing)&#34;&gt;Force based algorithms&lt;/a&gt; like for example the Kamada-Kawai or Fruchterman-Reingold ones. Your millage may vary from one algorithm to another since visualizations depend on the number of nodes, clustering and/or community structure of the network. Sounds easy, but there two big problems with this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Force based layout algorithms consist on performing a number of iterations aimed to minimize the energy of physical forces between nodes, and starting from an initial configuration which is typically a &lt;em&gt;random initial condition&lt;/em&gt;. This means that even if your network does not evolve in time, successive calls to the layout algorithm will produce different results. In our temporal network case it means that the layout from one snapshot to the next one will be very different producing a swarm-of-bees kind of motion. For example, if you run this script you will see that the four layouts are very different:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(igraph)
&lt;span style=&#34;color:#a6e22e&#34;&gt;par&lt;/span&gt;(mfrow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),mar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), oma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;watts.strogatz.game&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(i in &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(g,layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.fruchterman.reingold,margin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&#34;http://estebanmoro.org/post/2012-11-10-temporal-networks-with-igraph-and-r-with-20-lines-of-code_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;p&gt;Luckily, in igraph 0.6 we can specify the initial position of the nodes for some layout functions: &lt;code&gt;layout.graphopt&lt;/code&gt;, &lt;code&gt;layout.kamada.kawai&lt;/code&gt; and &lt;code&gt;layout.fruchterman.reingold&lt;/code&gt;. My personal experience is that &lt;code&gt;layout.graphopt&lt;/code&gt; crashes in this 0.6 version (although it works on 0.5), so we are left with the other two algorithms. The plan (taken from &lt;a href=&#34;https://vimeo.com/14922587&#34;&gt;this original idea&lt;/a&gt; of Tam√°s Nepusz, one of the developers of igraph) is to use the layout of the previous snapshot as the initial condition for the next snapshot layout so we have a smooth transtion from one to the other. In the example above, the implementation will be the following using the &lt;code&gt;start&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;par&lt;/span&gt;(mfrow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),mar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), oma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;watts.strogatz.game&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;)
layout.old &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout.fruchterman.reingold&lt;/span&gt;(g)
&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(i in &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;){
  layout.new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout.fruchterman.reingold&lt;/span&gt;(g,params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(niter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,maxdelta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.old))
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(g,layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.new)
  layout.old &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; layout.new
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://estebanmoro.org/img/posts/igraph_old4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you can see that the layouts are similar. There are two new parameters passed to the layout function: &lt;code&gt;niter = 10&lt;/code&gt; specify the number of iterations (10) of the minimization of energy procedure in the force based algorithm. This number should be small, otherwise the final result will be very different from the initial condition. The same happens for the other parameter &lt;code&gt;maxdelta=2&lt;/code&gt; which controls the maximum change in the position of the nodes allowed in the minimization procedure.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The other problem is that in a temporal network nodes and/or edges appear and disappear dynamically. Thus the time dependent graph might have different number of nodes and/or edges from one snapshot to the next one. This means that the layout at a given snapshot cannot be used as the initial condition to generate next time layout, since the number of nodes can be different. My solution to this problem is to consider all (past/present/future) nodes/edges when calculating the layout but to display only present nodes/edges in the plot by making past and future nodes/edges transparent. This trick allows the reutilization of the layouts between steps, but it will produce a more or less steady visualization in which the layout at any given time is not related to the instantaneous structure of the temporal graph. To overcome this problem we take advantage of another property of force based algorithms: nodes which are connected attract each other along the edge. At a given instant, we could then modify the attraction between nodes along edges depending on whether the the edge is not present. In igraph 0.6, only the &lt;code&gt;layout.fruchterman.reingold&lt;/code&gt; has this possibility through the parameter &lt;code&gt;weights&lt;/code&gt;, a vector giving edge weights which are use to multiply the attraction along the edge. For example we could set weight equal to one if the edge is present and use zero weight for the rest. This will produce a layout in which present nodes are tightly connected while the past/future nodes are repelled from them. This effect dramatically highlights the appearance and disappearance of nodes, but could create too much confusion if there are many of those events.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test this ideas, we will work an important example in the theory of complex networks: the preferential attachment mechanism to generate scale-free networks, i.e.¬†the &lt;a href=&#34;http://en.wikipedia.org/wiki/BA_model&#34;&gt;Barab√°si-Albert model&lt;/a&gt;. In our implementation, we keep the mechanism very simple: starting from an initial core of nodes, at each time step we add a single node that connects to m existing nodes which are selected proportionally to the number of links that the existing nodes already have. This mechanism leads to heavily linked nodes (‚Äúhubs‚Äù) together with a large fraction of poorly connected nodes. A particular realization of this model can be found in the file &lt;a href=&#34;https://%20github.com/emoro/temporal_networks/blob/master/edges.csv&#34;&gt;edges.csv&lt;/a&gt; below. The structure of the file is simple&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##   id1 id2 time
## 1   1   2    1
## 2   1   3    1
## 3   2   3    1
## 4   5   3    2
## 5   6   2    3
## 6   7   2    4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;each line of the form &lt;code&gt;id1 | id2 | time&lt;/code&gt; indicates that a link between id1 and id2 appears at a particular time. Depending on the context this might represent that the tie was activated at that particular instant (for example if it is a RT between two twitter accounts) or that it was the time in which the edge appeared first (like in our Barab√°si-Albert model). Here is the code to generate the snapshots and producing a PNG picture for each of them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(igraph)

&lt;span style=&#34;color:#75715e&#34;&gt;#load the edges with time stamp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#there are three columns in edges: id1,id2,time&lt;/span&gt;
edges &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.table&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edges.csv&amp;#34;&lt;/span&gt;,header&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;T)

&lt;span style=&#34;color:#75715e&#34;&gt;#generate the full graph&lt;/span&gt;
g &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;graph.edgelist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(edges[,&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]),directed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;F)
&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; edges[,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;#generate a cool palette for the graph&lt;/span&gt;
YlOrBr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFFFD4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FED98E&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FE9929&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#D95F0E&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#993404&amp;#34;&lt;/span&gt;)
YlOrBr.Lab &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colorRampPalette&lt;/span&gt;(YlOrBr, space &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lab&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#colors for the nodes are chosen from the very beginning&lt;/span&gt;
vcolor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;YlOrBr.Lab&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vcount&lt;/span&gt;(g)))

&lt;span style=&#34;color:#75715e&#34;&gt;#time in the edges goes from 1 to 300. We kick off at time 3&lt;/span&gt;
ti &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#weights of edges formed up to time ti is 1. Future edges are weighted 0&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;weight &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ti,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#generate first layout using weights.&lt;/span&gt;
layout.old &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout.fruchterman.reingold&lt;/span&gt;(g,params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(weights&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;weight))


&lt;span style=&#34;color:#75715e&#34;&gt;#total time of the dynamics&lt;/span&gt;
total_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time)
&lt;span style=&#34;color:#75715e&#34;&gt;#This is the time interval for the animation. In this case is taken to be 1/10 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#of the time (i.e. 10 snapshots) between adding two consecutive nodes &lt;/span&gt;
dt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Output for each frame will be a png with HD size 1600x900 :)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt;(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example%03d.png&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1600&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;)
nsteps &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time)
&lt;span style=&#34;color:#75715e&#34;&gt;#Time loop starts&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(ti in &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,total_time,dt)){
  &lt;span style=&#34;color:#75715e&#34;&gt;#define weight for edges present up to time ti.&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;weight &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ti,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) 
  &lt;span style=&#34;color:#75715e&#34;&gt;#Edges with non-zero weight are in gray. The rest are transparent&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ti,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
  &lt;span style=&#34;color:#75715e&#34;&gt;#Nodes with at least a non-zero weighted edge are in color. The rest are transparent&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;graph.strength&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),vcolor)
  &lt;span style=&#34;color:#75715e&#34;&gt;#given the new weights, we update the layout a little bit&lt;/span&gt;
  layout.new &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layout.fruchterman.reingold&lt;/span&gt;(g,params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(niter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.old,weights&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;weight,maxdelta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
  &lt;span style=&#34;color:#75715e&#34;&gt;#plot the new graph&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(g,layout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;layout.new,vertex.label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,vertex.size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1+2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;graph.strength&lt;/span&gt;(g)),vertex.frame.color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;(g)&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;color,edge.width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;,asp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,margin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-0.15&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;#use the new layout in the next round&lt;/span&gt;
  layout.old &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; layout.new 
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;dev.off&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see the edges present before time &lt;code&gt;ti&lt;/code&gt; are colored in ‚Äúgray‚Äù and weighted 1 while the rest are transparent &lt;code&gt;rgb(0,0,0,0)&lt;/code&gt; and weighted 0. For the nodes we have used the function &lt;code&gt;graph.strength&lt;/code&gt; that calculate the sum of weights of adjacent edges of a node: note that if at a given instant a node has no active adjacent edges, its graph strength is zero and thus the node is transparent. Otherwise it is colored as in the &lt;code&gt;vcolor&lt;/code&gt; vector. Final step is to encode this images into a video format. To that end I have used &lt;a href=&#34;http://ffmpeg.org&#34;&gt;ffmpeg&lt;/a&gt; which can be install in linux, windows or mac. The following command line in a terminal shell produces a video file &lt;code&gt;output.mp4&lt;/code&gt; in the mpeg format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;ffmpeg &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;M &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i example%&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;d.png output.mp4`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first &lt;code&gt;-r 10&lt;/code&gt; flag controls the rate of frames per second (fps), 10 in this case, while the &lt;code&gt;-b 20M&lt;/code&gt; sets the bitrate in the output (set to a large value here, 20M). The result is the following video&lt;/p&gt;
&lt;iframe class=&#34;vimeo-embed&#34; src=&#34;https://player.vimeo.com/video/53071346&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;div class=&#34;vembedr&#34;&gt;
&lt;div&gt;
&lt;iframe class=&#34;vimeo-embed&#34; src=&#34;https://player.vimeo.com/video/53071346&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34; webkitallowfullscreen=&#34;&#34; mozallowfullscreen=&#34;&#34; allowfullscreen=&#34;&#34; data-external=&#34;1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Done with 20 lines in R! I‚Äôm sure you can beat me with some other R tricks and many ways to improve this visualization. I am eager to know your comments. Please!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Temporal network of information diffusion in Twitter</title>
      <link>http://estebanmoro.org/post/2012-10-29-temporal-network-of-information-diffusion-in-twitter/</link>
      <pubDate>Mon, 29 Oct 2012 21:58:29 +0000</pubDate>
      
      <guid>http://estebanmoro.org/post/2012-10-29-temporal-network-of-information-diffusion-in-twitter/</guid>
      <description>&lt;link href=&#34;http://estebanmoro.org/rmarkdown-libs/vembedr/css/vembedr.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;p&gt;Millions of tweets, retweets and mentions are exchanged in Twitter everyday about very different subjects, events, opinions, etc. While aggregating this data over a time window might help to understand some properties of those processes in online social networks, the speed of information diffusion around particular time-bound events requires a temporal analysis of them. To show that (and with the help of the &lt;a href=&#34;http://www.iic.uam.es/en/solutions-and-services/text-a-opinion-mining&#34;&gt;Text &amp;amp; Opinion Mining Group&lt;/a&gt; at IIC) we collected all tweets (750k) of the vibrant conversation around the disputed subject of the &lt;a href=&#34;http://www.guardian.co.uk/business/2012/mar/29/spain-general-strike-rebellion-austerity&#34;&gt;general strike of March 29th&lt;/a&gt; in Spain. The data spans 10 days from 03/27 to 04/04 and using the RTs related to the general strike between twitter accounts we build up the following temporal network of information diffusion in Twitter.&lt;/p&gt;
&lt;div class=&#34;vembedr&#34;&gt;
&lt;div&gt;
&lt;iframe class=&#34;vimeo-embed&#34; src=&#34;https://player.vimeo.com/video/52390053&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34; webkitallowfullscreen=&#34;&#34; mozallowfullscreen=&#34;&#34; allowfullscreen=&#34;&#34; data-external=&#34;1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Day/night human rhythms are clearly seen, and there is an increase of activity in the evening/night before March 29th, which ended in the burst of RTs during that day. Moreover, using &lt;a href=&#34;http://en.wikipedia.org/wiki/Community_structure&#34;&gt;community-finding algorithms&lt;/a&gt; over the static (weighted) network of RTs we could assign each twitter account to one of the communities found. Analyzing the text of tweets within those communities we found the nature of the biggest groups: one is in favor of the economic motivations behind the strike, the other is not. Those communities fight close to dominate information propagation in Twitter even some days after the strike.&lt;/p&gt;
&lt;p&gt;This video highlights the importance of &lt;a href=&#34;http://arxiv.org/abs/1108.1780&#34;&gt;temporal networks&lt;/a&gt; in the analysis of information diffusion in online social networks.&lt;/p&gt;
&lt;p&gt;Technical details: the video was done using the amazing¬†&lt;a href=&#34;http://igraph.sourceforge.net&#34;&gt;igraph&lt;/a&gt; package in R and encoded using ffmpeg. Thanks to everyone that contributes to those open-source projects for their work.&lt;/p&gt;
&lt;p&gt;Edit (11/9/2012): I have post a tutorial on how to make this kind of visualizations &lt;a href=&#34;http://estebanmoro.org/post/2012-11-10-temporal-networks-with-igraph-and-r-with-20-lines-of-code/&#34;&gt;here&lt;/a&gt;. Spread the word!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>